import { __assign } from "tslib";
var registered = [];
var registeredCache = new Set();
export var filterDOMProps = Object.assign(function filterDOMProps(props) {
    var filteredProps = __assign({}, props);
    for (var prop in props) {
        if (registeredCache.has(prop)) {
            delete filteredProps[prop];
        }
    }
    return filteredProps;
}, {
    register: function () {
        var props = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            props[_i] = arguments[_i];
        }
        props.forEach(function (prop) {
            if (!registeredCache.has(prop)) {
                registered.push(prop);
                registeredCache.add(prop);
            }
        });
        registered.sort();
    },
    registered: registered,
});
filterDOMProps.register(
// These props are provided by useField directly.
'changed', 'error', 'errorMessage', 'field', 'fieldType', 'fields', 'initialCount', 'name', 'onChange', 'transform', 'value', 
// These props are provided by useField through context.state.
'disabled', 'label', 'placeholder', 'showInlineError', 
// This is used by AutoField.
'component', 
// These is used by AutoField and bridges.
'allowedValues');
