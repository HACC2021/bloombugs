import { __assign } from "tslib";
import mapValues from 'lodash/mapValues';
import React from 'react';
import { context as contextReference } from './context';
import { useField } from './useField';
export function connectField(Component, options) {
    function Field(props) {
        var _a = useField(props.name, props, options), fieldProps = _a[0], context = _a[1];
        var hasChainName = props.name !== '';
        var anyFlowingPropertySet = Object.keys(context.state).some(function (key) {
            var next = props[key];
            return next !== null && next !== undefined;
        });
        if (!anyFlowingPropertySet && !hasChainName) {
            return React.createElement(Component, __assign({}, props, fieldProps));
        }
        var nextContext = __assign({}, context);
        if (anyFlowingPropertySet) {
            nextContext.state = mapValues(nextContext.state, function (prev, key) {
                var next = props[key];
                return next !== null && next !== undefined ? !!next : prev;
            });
        }
        if (hasChainName) {
            nextContext.name = nextContext.name.concat(props.name);
        }
        return (React.createElement(contextReference.Provider, { value: nextContext },
            React.createElement(Component, __assign({}, props, fieldProps))));
    }
    Field.displayName = (Component.displayName || Component.name) + "Field";
    return Object.assign(Field, { Component: Component, options: options });
}
