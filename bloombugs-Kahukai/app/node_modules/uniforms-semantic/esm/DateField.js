import { __assign, __rest } from "tslib";
import classnames from 'classnames';
import React from 'react';
import { connectField, filterDOMProps } from 'uniforms';
/* istanbul ignore next */
var DateConstructor = (typeof global === 'object' ? global : window).Date;
var dateFormat = function (value) { return value === null || value === void 0 ? void 0 : value.toISOString().slice(0, -8); };
function Date(_a) {
    var _b;
    var className = _a.className, disabled = _a.disabled, error = _a.error, errorMessage = _a.errorMessage, icon = _a.icon, iconLeft = _a.iconLeft, iconProps = _a.iconProps, id = _a.id, inputRef = _a.inputRef, label = _a.label, max = _a.max, min = _a.min, name = _a.name, onChange = _a.onChange, placeholder = _a.placeholder, readOnly = _a.readOnly, required = _a.required, showInlineError = _a.showInlineError, value = _a.value, wrapClassName = _a.wrapClassName, props = __rest(_a, ["className", "disabled", "error", "errorMessage", "icon", "iconLeft", "iconProps", "id", "inputRef", "label", "max", "min", "name", "onChange", "placeholder", "readOnly", "required", "showInlineError", "value", "wrapClassName"]);
    return (React.createElement("div", __assign({ className: classnames(className, { disabled: disabled, error: error, required: required }, 'field') }, filterDOMProps(props)),
        label && React.createElement("label", { htmlFor: id }, label),
        React.createElement("div", { className: classnames('ui', wrapClassName, { left: iconLeft, icon: icon || iconLeft }, 'input') },
            React.createElement("input", { disabled: disabled, id: id, max: dateFormat(max), min: dateFormat(min), name: name, onChange: function (event) {
                    var date = new DateConstructor(event.target.valueAsNumber);
                    if (date.getFullYear() < 10000) {
                        onChange(date);
                    }
                    else if (isNaN(event.target.valueAsNumber)) {
                        onChange(undefined);
                    }
                }, placeholder: placeholder, readOnly: readOnly, ref: inputRef, type: "datetime-local", value: (_b = dateFormat(value)) !== null && _b !== void 0 ? _b : '' }),
            (icon || iconLeft) && (React.createElement("i", __assign({ className: (icon || iconLeft) + " icon" }, iconProps)))),
        !!(error && showInlineError) && (React.createElement("div", { className: "ui red basic pointing label" }, errorMessage))));
}
export default connectField(Date, { kind: 'leaf' });
