import { __assign, __rest } from "tslib";
import classnames from 'classnames';
import omit from 'lodash/omit';
import React from 'react';
import { connectField, filterDOMProps } from 'uniforms';
var base64 = typeof btoa === 'undefined'
    ? /* istanbul ignore next */ function (/* istanbul ignore next */ x) { return Buffer.from(x).toString('base64'); }
    : btoa;
var escape = function (x) { return base64(encodeURIComponent(x)).replace(/=+$/, ''); };
function Radio(_a) {
    var allowedValues = _a.allowedValues, className = _a.className, disabled = _a.disabled, error = _a.error, errorMessage = _a.errorMessage, id = _a.id, label = _a.label, name = _a.name, onChange = _a.onChange, readOnly = _a.readOnly, required = _a.required, showInlineError = _a.showInlineError, transform = _a.transform, value = _a.value, props = __rest(_a, ["allowedValues", "className", "disabled", "error", "errorMessage", "id", "label", "name", "onChange", "readOnly", "required", "showInlineError", "transform", "value"]);
    return (React.createElement("div", __assign({ className: classnames(className, { disabled: disabled, error: error }, 'grouped fields') }, omit(filterDOMProps(props), ['checkboxes'])),
        label && (React.createElement("div", { className: classnames({ required: required }, 'field') },
            React.createElement("label", null, label))), allowedValues === null || allowedValues === void 0 ? void 0 :
        allowedValues.map(function (item) { return (React.createElement("div", { className: "field", key: item },
            React.createElement("div", { className: "ui radio checkbox" },
                React.createElement("input", { checked: item === value, disabled: disabled, id: id + "-" + escape(item), name: name, onChange: function () {
                        if (!readOnly) {
                            onChange(item);
                        }
                    }, type: "radio" }),
                React.createElement("label", { htmlFor: id + "-" + escape(item) }, transform ? transform(item) : item)))); }),
        !!(error && showInlineError) && (React.createElement("div", { className: "ui red basic pointing label" }, errorMessage))));
}
export default connectField(Radio, { kind: 'leaf' });
