import { __assign, __rest } from "tslib";
import classnames from 'classnames';
import React from 'react';
import { connectField, filterDOMProps } from 'uniforms';
function Num(_a) {
    var className = _a.className, decimal = _a.decimal, disabled = _a.disabled, error = _a.error, errorMessage = _a.errorMessage, icon = _a.icon, iconLeft = _a.iconLeft, iconProps = _a.iconProps, id = _a.id, inputRef = _a.inputRef, label = _a.label, max = _a.max, min = _a.min, name = _a.name, onChange = _a.onChange, placeholder = _a.placeholder, readOnly = _a.readOnly, required = _a.required, showInlineError = _a.showInlineError, step = _a.step, value = _a.value, wrapClassName = _a.wrapClassName, props = __rest(_a, ["className", "decimal", "disabled", "error", "errorMessage", "icon", "iconLeft", "iconProps", "id", "inputRef", "label", "max", "min", "name", "onChange", "placeholder", "readOnly", "required", "showInlineError", "step", "value", "wrapClassName"]);
    return (React.createElement("div", __assign({ className: classnames(className, { disabled: disabled, error: error, required: required }, 'field') }, filterDOMProps(props)),
        label && React.createElement("label", { htmlFor: id }, label),
        React.createElement("div", { className: classnames('ui', wrapClassName, { left: iconLeft, icon: icon || iconLeft }, 'input') },
            React.createElement("input", { disabled: disabled, id: id, max: max, min: min, name: name, onChange: function (event) {
                    var parse = decimal ? parseFloat : parseInt;
                    var value = parse(event.target.value);
                    onChange(isNaN(value) ? undefined : value);
                }, placeholder: placeholder, readOnly: readOnly, ref: inputRef, step: step || (decimal ? 0.01 : 1), type: "number", value: value !== null && value !== void 0 ? value : '' }),
            (icon || iconLeft) && (React.createElement("i", __assign({ className: (icon || iconLeft) + " icon" }, iconProps)))),
        !!(error && showInlineError) && (React.createElement("div", { className: "ui red basic pointing label" }, errorMessage))));
}
export default connectField(Num, { kind: 'leaf' });
