import { __assign, __rest } from "tslib";
import classnames from 'classnames';
import cloneDeep from 'lodash/cloneDeep';
import React from 'react';
import { connectField, filterDOMProps, joinName, useField, } from 'uniforms';
function ListAdd(_a) {
    var disabled = _a.disabled, initialCount = _a.initialCount, name = _a.name, readOnly = _a.readOnly, value = _a.value, props = __rest(_a, ["disabled", "initialCount", "name", "readOnly", "value"]);
    var nameParts = joinName(null, name);
    var parentName = joinName(nameParts.slice(0, -1));
    var parent = useField(parentName, { initialCount: initialCount }, { absoluteName: true })[0];
    var limitNotReached = !disabled && !(parent.maxCount <= parent.value.length);
    function onAction(event) {
        if (limitNotReached &&
            !readOnly &&
            (!('key' in event) || event.key === 'Enter')) {
            parent.onChange(parent.value.concat([cloneDeep(value)]));
        }
    }
    return (React.createElement("i", __assign({}, filterDOMProps(props), { className: classnames('ui', props.className, limitNotReached ? 'link' : 'disabled', 'fitted add icon'), onClick: onAction, onKeyDown: onAction, role: "button", tabIndex: 0 })));
}
export default connectField(ListAdd, {
    initialValue: false,
    kind: 'leaf',
});
