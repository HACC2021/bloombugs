"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaximizeWindowCommand = exports.ResizeWindowToFitDeviceCommand = exports.ResizeWindowCommand = exports.TakeScreenshotOnFailCommand = exports.TakeElementScreenshotCommand = exports.TakeScreenshotCommand = exports.TakeScreenshotBaseCommand = void 0;
const type_1 = __importDefault(require("./type"));
const base_1 = __importDefault(require("./base"));
const options_1 = require("./options");
const initializers_1 = require("./validations/initializers");
const argument_1 = require("./validations/argument");
const utils_1 = require("../../screenshots/utils");
function initResizeToFitDeviceOptions(name, val, initOptions, validate = true) {
    return new options_1.ResizeToFitDeviceOptions(val, validate);
}
function initElementScreenshotOptions(name, val, initOptions, validate = true) {
    return new options_1.ElementScreenshotOptions(val, validate);
}
// Commands
class TakeScreenshotBaseCommand extends base_1.default {
    constructor(obj, testRun, type, validateProperties) {
        super(obj, testRun, type, validateProperties);
        this.markSeed = null;
        this.markData = '';
    }
    generateScreenshotMark() {
        Object.assign(this, utils_1.generateScreenshotMark());
    }
}
exports.TakeScreenshotBaseCommand = TakeScreenshotBaseCommand;
class TakeScreenshotCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun, validateProperties) {
        super(obj, testRun, type_1.default.takeScreenshot, validateProperties);
    }
    _getAssignableProperties() {
        return [
            { name: 'path', type: argument_1.screenshotPathArgument, defaultValue: '' },
            { name: 'fullPage', type: argument_1.booleanArgument, defaultValue: void 0 },
            { name: 'thumbnails', type: argument_1.booleanArgument, defaultValue: void 0 },
        ];
    }
}
exports.TakeScreenshotCommand = TakeScreenshotCommand;
class TakeElementScreenshotCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun, validateProperties) {
        super(obj, testRun, type_1.default.takeElementScreenshot, validateProperties);
    }
    _getAssignableProperties() {
        return [
            { name: 'selector', init: initializers_1.initSelector, required: true },
            { name: 'options', init: initElementScreenshotOptions, required: true },
            { name: 'path', type: argument_1.screenshotPathArgument, defaultValue: '' },
        ];
    }
}
exports.TakeElementScreenshotCommand = TakeElementScreenshotCommand;
class TakeScreenshotOnFailCommand extends TakeScreenshotBaseCommand {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.takeScreenshotOnFail);
    }
    _getAssignableProperties() {
        return [
            { name: 'fullPage', type: argument_1.booleanArgument, defaultValue: false },
        ];
    }
}
exports.TakeScreenshotOnFailCommand = TakeScreenshotOnFailCommand;
class ResizeWindowCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.resizeWindow);
    }
    _getAssignableProperties() {
        return [
            { name: 'width', type: argument_1.positiveIntegerArgument, required: true },
            { name: 'height', type: argument_1.positiveIntegerArgument, required: true },
        ];
    }
}
exports.ResizeWindowCommand = ResizeWindowCommand;
class ResizeWindowToFitDeviceCommand extends base_1.default {
    constructor(obj, testRun, validateProperties) {
        super(obj, testRun, type_1.default.resizeWindowToFitDevice, validateProperties);
    }
    _getAssignableProperties() {
        return [
            { name: 'device', type: argument_1.resizeWindowDeviceArgument, required: true },
            { name: 'options', type: argument_1.actionOptions, init: initResizeToFitDeviceOptions, required: true },
        ];
    }
}
exports.ResizeWindowToFitDeviceCommand = ResizeWindowToFitDeviceCommand;
class MaximizeWindowCommand {
    constructor() {
        this.type = type_1.default.maximizeWindow;
    }
}
exports.MaximizeWindowCommand = MaximizeWindowCommand;
//# sourceMappingURL=data:application/json;base64,