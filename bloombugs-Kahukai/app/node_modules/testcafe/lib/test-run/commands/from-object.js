"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = __importDefault(require("./type"));
const actions_1 = require("./actions");
const assertion_1 = __importDefault(require("./assertion"));
const browser_manipulation_1 = require("./browser-manipulation");
const observation_1 = require("./observation");
function getCmdCtor(type) {
    switch (type) {
        case type_1.default.click:
            return actions_1.ClickCommand;
        case type_1.default.rightClick:
            return actions_1.RightClickCommand;
        case type_1.default.doubleClick:
            return actions_1.DoubleClickCommand;
        case type_1.default.hover:
            return actions_1.HoverCommand;
        case type_1.default.drag:
            return actions_1.DragCommand;
        case type_1.default.dragToElement:
            return actions_1.DragToElementCommand;
        case type_1.default.typeText:
            return actions_1.TypeTextCommand;
        case type_1.default.selectText:
            return actions_1.SelectTextCommand;
        case type_1.default.selectTextAreaContent:
            return actions_1.SelectTextAreaContentCommand;
        case type_1.default.selectEditableContent:
            return actions_1.SelectEditableContentCommand;
        case type_1.default.pressKey:
            return actions_1.PressKeyCommand;
        case type_1.default.wait:
            return observation_1.WaitCommand;
        case type_1.default.navigateTo:
            return actions_1.NavigateToCommand;
        case type_1.default.setFilesToUpload:
            return actions_1.SetFilesToUploadCommand;
        case type_1.default.clearUpload:
            return actions_1.ClearUploadCommand;
        case type_1.default.takeScreenshot:
            return browser_manipulation_1.TakeScreenshotCommand;
        case type_1.default.takeElementScreenshot:
            return browser_manipulation_1.TakeElementScreenshotCommand;
        case type_1.default.resizeWindow:
            return browser_manipulation_1.ResizeWindowCommand;
        case type_1.default.resizeWindowToFitDevice:
            return browser_manipulation_1.ResizeWindowToFitDeviceCommand;
        case type_1.default.maximizeWindow:
            return browser_manipulation_1.MaximizeWindowCommand;
        case type_1.default.switchToIframe:
            return actions_1.SwitchToIframeCommand;
        case type_1.default.switchToMainWindow:
            return actions_1.SwitchToMainWindowCommand;
        case type_1.default.setNativeDialogHandler:
            return actions_1.SetNativeDialogHandlerCommand;
        case type_1.default.setTestSpeed:
            return actions_1.SetTestSpeedCommand;
        case type_1.default.setPageLoadTimeout:
            return actions_1.SetPageLoadTimeoutCommand;
        case type_1.default.assertion:
            return assertion_1.default;
        case type_1.default.debug:
            return observation_1.DebugCommand;
        case type_1.default.executeExpression:
            return actions_1.ExecuteExpressionCommand;
        case type_1.default.executeAsyncExpression:
            return actions_1.ExecuteAsyncExpressionCommand;
        case type_1.default.recorder:
            return actions_1.RecorderCommand;
        default:
            return null;
    }
}
// Create command from object
function createCommandFromObject(obj, testRun) {
    const CmdCtor = getCmdCtor(obj.type);
    return CmdCtor && new CmdCtor(obj, testRun);
}
exports.default = createCommandFromObject;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbS1vYmplY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdC1ydW4vY29tbWFuZHMvZnJvbS1vYmplY3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFFMUIsdUNBdUJtQjtBQUVuQiw0REFBMkM7QUFFM0MsaUVBTWdDO0FBRWhDLCtDQUEwRDtBQUUxRCxTQUFTLFVBQVUsQ0FBRSxJQUFJO0lBQ3JCLFFBQVEsSUFBSSxFQUFFO1FBQ1YsS0FBSyxjQUFJLENBQUMsS0FBSztZQUNYLE9BQU8sc0JBQVksQ0FBQztRQUV4QixLQUFLLGNBQUksQ0FBQyxVQUFVO1lBQ2hCLE9BQU8sMkJBQWlCLENBQUM7UUFFN0IsS0FBSyxjQUFJLENBQUMsV0FBVztZQUNqQixPQUFPLDRCQUFrQixDQUFDO1FBRTlCLEtBQUssY0FBSSxDQUFDLEtBQUs7WUFDWCxPQUFPLHNCQUFZLENBQUM7UUFFeEIsS0FBSyxjQUFJLENBQUMsSUFBSTtZQUNWLE9BQU8scUJBQVcsQ0FBQztRQUV2QixLQUFLLGNBQUksQ0FBQyxhQUFhO1lBQ25CLE9BQU8sOEJBQW9CLENBQUM7UUFFaEMsS0FBSyxjQUFJLENBQUMsUUFBUTtZQUNkLE9BQU8seUJBQWUsQ0FBQztRQUUzQixLQUFLLGNBQUksQ0FBQyxVQUFVO1lBQ2hCLE9BQU8sMkJBQWlCLENBQUM7UUFFN0IsS0FBSyxjQUFJLENBQUMscUJBQXFCO1lBQzNCLE9BQU8sc0NBQTRCLENBQUM7UUFFeEMsS0FBSyxjQUFJLENBQUMscUJBQXFCO1lBQzNCLE9BQU8sc0NBQTRCLENBQUM7UUFFeEMsS0FBSyxjQUFJLENBQUMsUUFBUTtZQUNkLE9BQU8seUJBQWUsQ0FBQztRQUUzQixLQUFLLGNBQUksQ0FBQyxJQUFJO1lBQ1YsT0FBTyx5QkFBVyxDQUFDO1FBRXZCLEtBQUssY0FBSSxDQUFDLFVBQVU7WUFDaEIsT0FBTywyQkFBaUIsQ0FBQztRQUU3QixLQUFLLGNBQUksQ0FBQyxnQkFBZ0I7WUFDdEIsT0FBTyxpQ0FBdUIsQ0FBQztRQUVuQyxLQUFLLGNBQUksQ0FBQyxXQUFXO1lBQ2pCLE9BQU8sNEJBQWtCLENBQUM7UUFFOUIsS0FBSyxjQUFJLENBQUMsY0FBYztZQUNwQixPQUFPLDRDQUFxQixDQUFDO1FBRWpDLEtBQUssY0FBSSxDQUFDLHFCQUFxQjtZQUMzQixPQUFPLG1EQUE0QixDQUFDO1FBRXhDLEtBQUssY0FBSSxDQUFDLFlBQVk7WUFDbEIsT0FBTywwQ0FBbUIsQ0FBQztRQUUvQixLQUFLLGNBQUksQ0FBQyx1QkFBdUI7WUFDN0IsT0FBTyxxREFBOEIsQ0FBQztRQUUxQyxLQUFLLGNBQUksQ0FBQyxjQUFjO1lBQ3BCLE9BQU8sNENBQXFCLENBQUM7UUFFakMsS0FBSyxjQUFJLENBQUMsY0FBYztZQUNwQixPQUFPLCtCQUFxQixDQUFDO1FBRWpDLEtBQUssY0FBSSxDQUFDLGtCQUFrQjtZQUN4QixPQUFPLG1DQUF5QixDQUFDO1FBRXJDLEtBQUssY0FBSSxDQUFDLHNCQUFzQjtZQUM1QixPQUFPLHVDQUE2QixDQUFDO1FBRXpDLEtBQUssY0FBSSxDQUFDLFlBQVk7WUFDbEIsT0FBTyw2QkFBbUIsQ0FBQztRQUUvQixLQUFLLGNBQUksQ0FBQyxrQkFBa0I7WUFDeEIsT0FBTyxtQ0FBeUIsQ0FBQztRQUVyQyxLQUFLLGNBQUksQ0FBQyxTQUFTO1lBQ2YsT0FBTyxtQkFBZ0IsQ0FBQztRQUU1QixLQUFLLGNBQUksQ0FBQyxLQUFLO1lBQ1gsT0FBTywwQkFBWSxDQUFDO1FBRXhCLEtBQUssY0FBSSxDQUFDLGlCQUFpQjtZQUN2QixPQUFPLGtDQUF3QixDQUFDO1FBRXBDLEtBQUssY0FBSSxDQUFDLHNCQUFzQjtZQUM1QixPQUFPLHVDQUE2QixDQUFDO1FBRXpDLEtBQUssY0FBSSxDQUFDLFFBQVE7WUFDZCxPQUFPLHlCQUFlLENBQUM7UUFFM0I7WUFDSSxPQUFPLElBQUksQ0FBQztLQUNuQjtBQUNMLENBQUM7QUFFRCw2QkFBNkI7QUFDN0IsU0FBd0IsdUJBQXVCLENBQUUsR0FBRyxFQUFFLE9BQU87SUFDekQsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVyQyxPQUFPLE9BQU8sSUFBSSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUpELDBDQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRZUEUgZnJvbSAnLi90eXBlJztcblxuaW1wb3J0IHtcbiAgICBDbGlja0NvbW1hbmQsXG4gICAgUmlnaHRDbGlja0NvbW1hbmQsXG4gICAgRG91YmxlQ2xpY2tDb21tYW5kLFxuICAgIEhvdmVyQ29tbWFuZCxcbiAgICBEcmFnQ29tbWFuZCxcbiAgICBEcmFnVG9FbGVtZW50Q29tbWFuZCxcbiAgICBUeXBlVGV4dENvbW1hbmQsXG4gICAgU2VsZWN0VGV4dENvbW1hbmQsXG4gICAgU2VsZWN0VGV4dEFyZWFDb250ZW50Q29tbWFuZCxcbiAgICBTZWxlY3RFZGl0YWJsZUNvbnRlbnRDb21tYW5kLFxuICAgIFByZXNzS2V5Q29tbWFuZCxcbiAgICBOYXZpZ2F0ZVRvQ29tbWFuZCxcbiAgICBTZXRGaWxlc1RvVXBsb2FkQ29tbWFuZCxcbiAgICBDbGVhclVwbG9hZENvbW1hbmQsXG4gICAgU3dpdGNoVG9JZnJhbWVDb21tYW5kLFxuICAgIFN3aXRjaFRvTWFpbldpbmRvd0NvbW1hbmQsXG4gICAgU2V0TmF0aXZlRGlhbG9nSGFuZGxlckNvbW1hbmQsXG4gICAgU2V0VGVzdFNwZWVkQ29tbWFuZCxcbiAgICBTZXRQYWdlTG9hZFRpbWVvdXRDb21tYW5kLFxuICAgIEV4ZWN1dGVFeHByZXNzaW9uQ29tbWFuZCxcbiAgICBFeGVjdXRlQXN5bmNFeHByZXNzaW9uQ29tbWFuZCxcbiAgICBSZWNvcmRlckNvbW1hbmQsXG59IGZyb20gJy4vYWN0aW9ucyc7XG5cbmltcG9ydCBBc3NlcnRpb25Db21tYW5kIGZyb20gJy4vYXNzZXJ0aW9uJztcblxuaW1wb3J0IHtcbiAgICBUYWtlU2NyZWVuc2hvdENvbW1hbmQsXG4gICAgVGFrZUVsZW1lbnRTY3JlZW5zaG90Q29tbWFuZCxcbiAgICBSZXNpemVXaW5kb3dDb21tYW5kLFxuICAgIFJlc2l6ZVdpbmRvd1RvRml0RGV2aWNlQ29tbWFuZCxcbiAgICBNYXhpbWl6ZVdpbmRvd0NvbW1hbmQsXG59IGZyb20gJy4vYnJvd3Nlci1tYW5pcHVsYXRpb24nO1xuXG5pbXBvcnQgeyBXYWl0Q29tbWFuZCwgRGVidWdDb21tYW5kIH0gZnJvbSAnLi9vYnNlcnZhdGlvbic7XG5cbmZ1bmN0aW9uIGdldENtZEN0b3IgKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBUWVBFLmNsaWNrOlxuICAgICAgICAgICAgcmV0dXJuIENsaWNrQ29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUucmlnaHRDbGljazpcbiAgICAgICAgICAgIHJldHVybiBSaWdodENsaWNrQ29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUuZG91YmxlQ2xpY2s6XG4gICAgICAgICAgICByZXR1cm4gRG91YmxlQ2xpY2tDb21tYW5kO1xuXG4gICAgICAgIGNhc2UgVFlQRS5ob3ZlcjpcbiAgICAgICAgICAgIHJldHVybiBIb3ZlckNvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLmRyYWc6XG4gICAgICAgICAgICByZXR1cm4gRHJhZ0NvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLmRyYWdUb0VsZW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gRHJhZ1RvRWxlbWVudENvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLnR5cGVUZXh0OlxuICAgICAgICAgICAgcmV0dXJuIFR5cGVUZXh0Q29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUuc2VsZWN0VGV4dDpcbiAgICAgICAgICAgIHJldHVybiBTZWxlY3RUZXh0Q29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUuc2VsZWN0VGV4dEFyZWFDb250ZW50OlxuICAgICAgICAgICAgcmV0dXJuIFNlbGVjdFRleHRBcmVhQ29udGVudENvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLnNlbGVjdEVkaXRhYmxlQ29udGVudDpcbiAgICAgICAgICAgIHJldHVybiBTZWxlY3RFZGl0YWJsZUNvbnRlbnRDb21tYW5kO1xuXG4gICAgICAgIGNhc2UgVFlQRS5wcmVzc0tleTpcbiAgICAgICAgICAgIHJldHVybiBQcmVzc0tleUNvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLndhaXQ6XG4gICAgICAgICAgICByZXR1cm4gV2FpdENvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLm5hdmlnYXRlVG86XG4gICAgICAgICAgICByZXR1cm4gTmF2aWdhdGVUb0NvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLnNldEZpbGVzVG9VcGxvYWQ6XG4gICAgICAgICAgICByZXR1cm4gU2V0RmlsZXNUb1VwbG9hZENvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLmNsZWFyVXBsb2FkOlxuICAgICAgICAgICAgcmV0dXJuIENsZWFyVXBsb2FkQ29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUudGFrZVNjcmVlbnNob3Q6XG4gICAgICAgICAgICByZXR1cm4gVGFrZVNjcmVlbnNob3RDb21tYW5kO1xuXG4gICAgICAgIGNhc2UgVFlQRS50YWtlRWxlbWVudFNjcmVlbnNob3Q6XG4gICAgICAgICAgICByZXR1cm4gVGFrZUVsZW1lbnRTY3JlZW5zaG90Q29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUucmVzaXplV2luZG93OlxuICAgICAgICAgICAgcmV0dXJuIFJlc2l6ZVdpbmRvd0NvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLnJlc2l6ZVdpbmRvd1RvRml0RGV2aWNlOlxuICAgICAgICAgICAgcmV0dXJuIFJlc2l6ZVdpbmRvd1RvRml0RGV2aWNlQ29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUubWF4aW1pemVXaW5kb3c6XG4gICAgICAgICAgICByZXR1cm4gTWF4aW1pemVXaW5kb3dDb21tYW5kO1xuXG4gICAgICAgIGNhc2UgVFlQRS5zd2l0Y2hUb0lmcmFtZTpcbiAgICAgICAgICAgIHJldHVybiBTd2l0Y2hUb0lmcmFtZUNvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLnN3aXRjaFRvTWFpbldpbmRvdzpcbiAgICAgICAgICAgIHJldHVybiBTd2l0Y2hUb01haW5XaW5kb3dDb21tYW5kO1xuXG4gICAgICAgIGNhc2UgVFlQRS5zZXROYXRpdmVEaWFsb2dIYW5kbGVyOlxuICAgICAgICAgICAgcmV0dXJuIFNldE5hdGl2ZURpYWxvZ0hhbmRsZXJDb21tYW5kO1xuXG4gICAgICAgIGNhc2UgVFlQRS5zZXRUZXN0U3BlZWQ6XG4gICAgICAgICAgICByZXR1cm4gU2V0VGVzdFNwZWVkQ29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUuc2V0UGFnZUxvYWRUaW1lb3V0OlxuICAgICAgICAgICAgcmV0dXJuIFNldFBhZ2VMb2FkVGltZW91dENvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLmFzc2VydGlvbjpcbiAgICAgICAgICAgIHJldHVybiBBc3NlcnRpb25Db21tYW5kO1xuXG4gICAgICAgIGNhc2UgVFlQRS5kZWJ1ZzpcbiAgICAgICAgICAgIHJldHVybiBEZWJ1Z0NvbW1hbmQ7XG5cbiAgICAgICAgY2FzZSBUWVBFLmV4ZWN1dGVFeHByZXNzaW9uOlxuICAgICAgICAgICAgcmV0dXJuIEV4ZWN1dGVFeHByZXNzaW9uQ29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUuZXhlY3V0ZUFzeW5jRXhwcmVzc2lvbjpcbiAgICAgICAgICAgIHJldHVybiBFeGVjdXRlQXN5bmNFeHByZXNzaW9uQ29tbWFuZDtcblxuICAgICAgICBjYXNlIFRZUEUucmVjb3JkZXI6XG4gICAgICAgICAgICByZXR1cm4gUmVjb3JkZXJDb21tYW5kO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbi8vIENyZWF0ZSBjb21tYW5kIGZyb20gb2JqZWN0XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDb21tYW5kRnJvbU9iamVjdCAob2JqLCB0ZXN0UnVuKSB7XG4gICAgY29uc3QgQ21kQ3RvciA9IGdldENtZEN0b3Iob2JqLnR5cGUpO1xuXG4gICAgcmV0dXJuIENtZEN0b3IgJiYgbmV3IENtZEN0b3Iob2JqLCB0ZXN0UnVuKTtcbn1cbiJdfQ==