"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisableDebugCommand = exports.DebugCommand = exports.ExecuteSelectorCommand = exports.ExecuteClientFunctionCommand = exports.ExecuteClientFunctionCommandBase = exports.WaitCommand = void 0;
const type_1 = __importDefault(require("./type"));
const base_1 = __importDefault(require("./base"));
const argument_1 = require("./validations/argument");
// Commands
class WaitCommand extends base_1.default {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.wait);
    }
    _getAssignableProperties() {
        return [
            { name: 'timeout', type: argument_1.positiveIntegerArgument, required: true },
        ];
    }
}
exports.WaitCommand = WaitCommand;
class ExecuteClientFunctionCommandBase extends base_1.default {
    constructor(obj, testRun, type) {
        super(obj, testRun, type, false);
    }
    _getAssignableProperties() {
        return [
            { name: 'instantiationCallsiteName', defaultValue: '' },
            { name: 'fnCode', defaultValue: '' },
            { name: 'args', defaultValue: [] },
            { name: 'dependencies', defaultValue: [] },
        ];
    }
}
exports.ExecuteClientFunctionCommandBase = ExecuteClientFunctionCommandBase;
class ExecuteClientFunctionCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.executeClientFunction);
    }
}
exports.ExecuteClientFunctionCommand = ExecuteClientFunctionCommand;
class ExecuteSelectorCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.executeSelector);
    }
    _getAssignableProperties() {
        return super._getAssignableProperties().concat([
            { name: 'visibilityCheck', defaultValue: false },
            { name: 'timeout', defaultValue: null },
            { name: 'apiFnChain' },
            { name: 'needError' },
            { name: 'index', defaultValue: 0 },
        ]);
    }
}
exports.ExecuteSelectorCommand = ExecuteSelectorCommand;
class DebugCommand extends base_1.default {
    constructor() {
        super(null, null, type_1.default.debug);
    }
}
exports.DebugCommand = DebugCommand;
class DisableDebugCommand extends base_1.default {
    constructor() {
        super(null, null, type_1.default.disableDebug);
    }
}
exports.DisableDebugCommand = DisableDebugCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdC1ydW4vY29tbWFuZHMvb2JzZXJ2YXRpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0RBQTBCO0FBQzFCLGtEQUFpQztBQUNqQyxxREFBaUU7QUFFakUsV0FBVztBQUNYLE1BQWEsV0FBWSxTQUFRLGNBQVc7SUFDeEMsWUFBYSxHQUFHLEVBQUUsT0FBTztRQUNyQixLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELHdCQUF3QjtRQUNwQixPQUFPO1lBQ0gsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxrQ0FBdUIsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO1NBQ3JFLENBQUM7SUFDTixDQUFDO0NBQ0o7QUFWRCxrQ0FVQztBQUVELE1BQWEsZ0NBQWlDLFNBQVEsY0FBVztJQUM3RCxZQUFhLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSTtRQUMzQixLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELHdCQUF3QjtRQUNwQixPQUFPO1lBQ0gsRUFBRSxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtZQUN2RCxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtZQUNwQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtZQUNsQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtTQUM3QyxDQUFDO0lBQ04sQ0FBQztDQUNKO0FBYkQsNEVBYUM7QUFFRCxNQUFhLDRCQUE2QixTQUFRLGdDQUFnQztJQUM5RSxZQUFhLEdBQUcsRUFBRSxPQUFPO1FBQ3JCLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLGNBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Q0FDSjtBQUpELG9FQUlDO0FBRUQsTUFBYSxzQkFBdUIsU0FBUSxnQ0FBZ0M7SUFDeEUsWUFBYSxHQUFHLEVBQUUsT0FBTztRQUNyQixLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxjQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELHdCQUF3QjtRQUNwQixPQUFPLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUMzQyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFO1lBQ2hELEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFO1lBQ3ZDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUN0QixFQUFFLElBQUksRUFBRSxXQUFXLEVBQUU7WUFDckIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDLEVBQUU7U0FDckMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBZEQsd0RBY0M7QUFFRCxNQUFhLFlBQWEsU0FBUSxjQUFXO0lBQ3pDO1FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsY0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQUpELG9DQUlDO0FBRUQsTUFBYSxtQkFBb0IsU0FBUSxjQUFXO0lBQ2hEO1FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsY0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Q0FDSjtBQUpELGtEQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRZUEUgZnJvbSAnLi90eXBlJztcbmltcG9ydCBDb21tYW5kQmFzZSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgcG9zaXRpdmVJbnRlZ2VyQXJndW1lbnQgfSBmcm9tICcuL3ZhbGlkYXRpb25zL2FyZ3VtZW50JztcblxuLy8gQ29tbWFuZHNcbmV4cG9ydCBjbGFzcyBXYWl0Q29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS53YWl0KTtcbiAgICB9XG5cbiAgICBfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyBuYW1lOiAndGltZW91dCcsIHR5cGU6IHBvc2l0aXZlSW50ZWdlckFyZ3VtZW50LCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmRCYXNlIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4sIHR5cGUpIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCB0eXBlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgbmFtZTogJ2luc3RhbnRpYXRpb25DYWxsc2l0ZU5hbWUnLCBkZWZhdWx0VmFsdWU6ICcnIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdmbkNvZGUnLCBkZWZhdWx0VmFsdWU6ICcnIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdhcmdzJywgZGVmYXVsdFZhbHVlOiBbXSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnZGVwZW5kZW5jaWVzJywgZGVmYXVsdFZhbHVlOiBbXSB9LFxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmQgZXh0ZW5kcyBFeGVjdXRlQ2xpZW50RnVuY3Rpb25Db21tYW5kQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUuZXhlY3V0ZUNsaWVudEZ1bmN0aW9uKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFeGVjdXRlU2VsZWN0b3JDb21tYW5kIGV4dGVuZHMgRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4pIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCBUWVBFLmV4ZWN1dGVTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRBc3NpZ25hYmxlUHJvcGVydGllcygpLmNvbmNhdChbXG4gICAgICAgICAgICB7IG5hbWU6ICd2aXNpYmlsaXR5Q2hlY2snLCBkZWZhdWx0VmFsdWU6IGZhbHNlIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICd0aW1lb3V0JywgZGVmYXVsdFZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdhcGlGbkNoYWluJyB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnbmVlZEVycm9yJyB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnaW5kZXgnLCBkZWZhdWx0VmFsdWU6IDAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVidWdDb21tYW5kIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIobnVsbCwgbnVsbCwgVFlQRS5kZWJ1Zyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGlzYWJsZURlYnVnQ29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKG51bGwsIG51bGwsIFRZUEUuZGlzYWJsZURlYnVnKTtcbiAgICB9XG59XG5cbiJdfQ==