"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const exportble_lib_path_1 = __importDefault(require("../test-file/exportble-lib-path"));
function getPresetEnvForTestCodeOpts() {
    return {
        targets: { node: 'current' },
        loose: true,
        exclude: ['transform-regenerator'],
    };
}
function getPresetEnvForClientFunctionOpts() {
    return {
        loose: true,
        exclude: ['transform-typeof-symbol', 'transform-for-of'],
    };
}
function getModuleResolverOpts() {
    return {
        resolvePath(source) {
            if (source === 'testcafe')
                return exportble_lib_path_1.default;
            return source;
        },
    };
}
function getTransformForOfOptions() {
    // NOTE: allowArrayLike is required to allow iterating non-iterable objects (e.g. NodeList)
    // to preserve compatibility with older TestCafe code
    return { loose: true, allowArrayLike: true };
}
function getTransformRuntimeOpts() {
    // NOTE: We are forced to import helpers to each compiled file
    // because of '@babel/plugin-transform-runtime' plugin cannot correctly resolve path
    // to the helpers from the '@babel/runtime' module.
    return {
        'helpers': false,
    };
}
function getPresetReact() {
    const presetReact = require('@babel/preset-react');
    presetReact.presets = []; // disables flow so it doesn't confict w/ presetFlow
    return presetReact;
}
// NOTE: lazy load heavy dependencies
function loadLibs() {
    return {
        babel: require('@babel/core'),
        presetStage2: require('./preset-stage-2'),
        presetFlow: require('@babel/preset-flow'),
        transformRuntime: [require('@babel/plugin-transform-runtime'), getTransformRuntimeOpts()],
        transformForOfAsArray: [require('@babel/plugin-transform-for-of'), getTransformForOfOptions()],
        presetEnvForClientFunction: [require('@babel/preset-env'), getPresetEnvForClientFunctionOpts()],
        presetEnvForTestCode: [require('@babel/preset-env'), getPresetEnvForTestCodeOpts()],
        moduleResolver: [require('babel-plugin-module-resolver'), getModuleResolverOpts()],
        presetReact: getPresetReact(),
        proposalPrivateMethods: [require('@babel/plugin-proposal-private-methods'), { loose: true }],
        proposalClassProperties: [require('@babel/plugin-proposal-class-properties'), { loose: true }],
    };
}
exports.default = loadLibs;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1saWJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBpbGVyL2JhYmVsL2xvYWQtbGlicy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlGQUFrRTtBQUVsRSxTQUFTLDJCQUEyQjtJQUNoQyxPQUFPO1FBQ0gsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtRQUM1QixLQUFLLEVBQUksSUFBSTtRQUNiLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDO0tBQ3JDLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxpQ0FBaUM7SUFDdEMsT0FBTztRQUNILEtBQUssRUFBSSxJQUFJO1FBQ2IsT0FBTyxFQUFFLENBQUMseUJBQXlCLEVBQUUsa0JBQWtCLENBQUM7S0FDM0QsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLHFCQUFxQjtJQUMxQixPQUFPO1FBQ0gsV0FBVyxDQUFFLE1BQU07WUFDZixJQUFJLE1BQU0sS0FBSyxVQUFVO2dCQUNyQixPQUFPLDRCQUFtQixDQUFDO1lBRS9CLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUM7S0FDSixDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsd0JBQXdCO0lBQzdCLDJGQUEyRjtJQUMzRixxREFBcUQ7SUFDckQsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ2pELENBQUM7QUFFRCxTQUFTLHVCQUF1QjtJQUM1Qiw4REFBOEQ7SUFDOUQsb0ZBQW9GO0lBQ3BGLG1EQUFtRDtJQUNuRCxPQUFPO1FBQ0gsU0FBUyxFQUFFLEtBQUs7S0FDbkIsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLGNBQWM7SUFDbkIsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFFbkQsV0FBVyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxvREFBb0Q7SUFFOUUsT0FBTyxXQUFXLENBQUM7QUFDdkIsQ0FBQztBQUVELHFDQUFxQztBQUNyQyxTQUF3QixRQUFRO0lBQzVCLE9BQU87UUFDSCxLQUFLLEVBQXVCLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDbEQsWUFBWSxFQUFnQixPQUFPLENBQUMsa0JBQWtCLENBQUM7UUFDdkQsVUFBVSxFQUFrQixPQUFPLENBQUMsb0JBQW9CLENBQUM7UUFDekQsZ0JBQWdCLEVBQVksQ0FBQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsRUFBRSx1QkFBdUIsRUFBRSxDQUFDO1FBQ25HLHFCQUFxQixFQUFPLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQztRQUNuRywwQkFBMEIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLGlDQUFpQyxFQUFFLENBQUM7UUFDL0Ysb0JBQW9CLEVBQVEsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsRUFBRSwyQkFBMkIsRUFBRSxDQUFDO1FBQ3pGLGNBQWMsRUFBYyxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLHFCQUFxQixFQUFFLENBQUM7UUFDOUYsV0FBVyxFQUFpQixjQUFjLEVBQUU7UUFDNUMsc0JBQXNCLEVBQU0sQ0FBQyxPQUFPLENBQUMsd0NBQXdDLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUNoRyx1QkFBdUIsRUFBSyxDQUFDLE9BQU8sQ0FBQyx5Q0FBeUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO0tBQ3BHLENBQUM7QUFDTixDQUFDO0FBZEQsMkJBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRVhQT1JUQUJMRV9MSUJfUEFUSCBmcm9tICcuLi90ZXN0LWZpbGUvZXhwb3J0YmxlLWxpYi1wYXRoJztcblxuZnVuY3Rpb24gZ2V0UHJlc2V0RW52Rm9yVGVzdENvZGVPcHRzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YXJnZXRzOiB7IG5vZGU6ICdjdXJyZW50JyB9LFxuICAgICAgICBsb29zZTogICB0cnVlLFxuICAgICAgICBleGNsdWRlOiBbJ3RyYW5zZm9ybS1yZWdlbmVyYXRvciddLFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFByZXNldEVudkZvckNsaWVudEZ1bmN0aW9uT3B0cyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG9vc2U6ICAgdHJ1ZSxcbiAgICAgICAgZXhjbHVkZTogWyd0cmFuc2Zvcm0tdHlwZW9mLXN5bWJvbCcsICd0cmFuc2Zvcm0tZm9yLW9mJ10sXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9kdWxlUmVzb2x2ZXJPcHRzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXNvbHZlUGF0aCAoc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlID09PSAndGVzdGNhZmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiBFWFBPUlRBQkxFX0xJQl9QQVRIO1xuXG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9LFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybUZvck9mT3B0aW9ucyAoKSB7XG4gICAgLy8gTk9URTogYWxsb3dBcnJheUxpa2UgaXMgcmVxdWlyZWQgdG8gYWxsb3cgaXRlcmF0aW5nIG5vbi1pdGVyYWJsZSBvYmplY3RzIChlLmcuIE5vZGVMaXN0KVxuICAgIC8vIHRvIHByZXNlcnZlIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBUZXN0Q2FmZSBjb2RlXG4gICAgcmV0dXJuIHsgbG9vc2U6IHRydWUsIGFsbG93QXJyYXlMaWtlOiB0cnVlIH07XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybVJ1bnRpbWVPcHRzICgpIHtcbiAgICAvLyBOT1RFOiBXZSBhcmUgZm9yY2VkIHRvIGltcG9ydCBoZWxwZXJzIHRvIGVhY2ggY29tcGlsZWQgZmlsZVxuICAgIC8vIGJlY2F1c2Ugb2YgJ0BiYWJlbC9wbHVnaW4tdHJhbnNmb3JtLXJ1bnRpbWUnIHBsdWdpbiBjYW5ub3QgY29ycmVjdGx5IHJlc29sdmUgcGF0aFxuICAgIC8vIHRvIHRoZSBoZWxwZXJzIGZyb20gdGhlICdAYmFiZWwvcnVudGltZScgbW9kdWxlLlxuICAgIHJldHVybiB7XG4gICAgICAgICdoZWxwZXJzJzogZmFsc2UsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJlc2V0UmVhY3QgKCkge1xuICAgIGNvbnN0IHByZXNldFJlYWN0ID0gcmVxdWlyZSgnQGJhYmVsL3ByZXNldC1yZWFjdCcpO1xuXG4gICAgcHJlc2V0UmVhY3QucHJlc2V0cyA9IFtdOyAvLyBkaXNhYmxlcyBmbG93IHNvIGl0IGRvZXNuJ3QgY29uZmljdCB3LyBwcmVzZXRGbG93XG5cbiAgICByZXR1cm4gcHJlc2V0UmVhY3Q7XG59XG5cbi8vIE5PVEU6IGxhenkgbG9hZCBoZWF2eSBkZXBlbmRlbmNpZXNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWRMaWJzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYWJlbDogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnQGJhYmVsL2NvcmUnKSxcbiAgICAgICAgcHJlc2V0U3RhZ2UyOiAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vcHJlc2V0LXN0YWdlLTInKSxcbiAgICAgICAgcHJlc2V0RmxvdzogICAgICAgICAgICAgICAgIHJlcXVpcmUoJ0BiYWJlbC9wcmVzZXQtZmxvdycpLFxuICAgICAgICB0cmFuc2Zvcm1SdW50aW1lOiAgICAgICAgICAgW3JlcXVpcmUoJ0BiYWJlbC9wbHVnaW4tdHJhbnNmb3JtLXJ1bnRpbWUnKSwgZ2V0VHJhbnNmb3JtUnVudGltZU9wdHMoKV0sXG4gICAgICAgIHRyYW5zZm9ybUZvck9mQXNBcnJheTogICAgICBbcmVxdWlyZSgnQGJhYmVsL3BsdWdpbi10cmFuc2Zvcm0tZm9yLW9mJyksIGdldFRyYW5zZm9ybUZvck9mT3B0aW9ucygpXSxcbiAgICAgICAgcHJlc2V0RW52Rm9yQ2xpZW50RnVuY3Rpb246IFtyZXF1aXJlKCdAYmFiZWwvcHJlc2V0LWVudicpLCBnZXRQcmVzZXRFbnZGb3JDbGllbnRGdW5jdGlvbk9wdHMoKV0sXG4gICAgICAgIHByZXNldEVudkZvclRlc3RDb2RlOiAgICAgICBbcmVxdWlyZSgnQGJhYmVsL3ByZXNldC1lbnYnKSwgZ2V0UHJlc2V0RW52Rm9yVGVzdENvZGVPcHRzKCldLFxuICAgICAgICBtb2R1bGVSZXNvbHZlcjogICAgICAgICAgICAgW3JlcXVpcmUoJ2JhYmVsLXBsdWdpbi1tb2R1bGUtcmVzb2x2ZXInKSwgZ2V0TW9kdWxlUmVzb2x2ZXJPcHRzKCldLFxuICAgICAgICBwcmVzZXRSZWFjdDogICAgICAgICAgICAgICAgZ2V0UHJlc2V0UmVhY3QoKSxcbiAgICAgICAgcHJvcG9zYWxQcml2YXRlTWV0aG9kczogICAgIFtyZXF1aXJlKCdAYmFiZWwvcGx1Z2luLXByb3Bvc2FsLXByaXZhdGUtbWV0aG9kcycpLCB7IGxvb3NlOiB0cnVlIH1dLFxuICAgICAgICBwcm9wb3NhbENsYXNzUHJvcGVydGllczogICAgW3JlcXVpcmUoJ0BiYWJlbC9wbHVnaW4tcHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcycpLCB7IGxvb3NlOiB0cnVlIH1dLFxuICAgIH07XG59XG4iXX0=