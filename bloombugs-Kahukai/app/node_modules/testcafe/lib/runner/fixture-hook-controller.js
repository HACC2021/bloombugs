"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const phase_1 = __importDefault(require("../test-run/phase"));
const process_test_fn_error_1 = __importDefault(require("../errors/process-test-fn-error"));
class FixtureHookController {
    constructor(tests, browserConnectionCount) {
        this._fixtureMap = FixtureHookController._createFixtureMap(tests, browserConnectionCount);
    }
    static _ensureFixtureMapItem(fixtureMap, fixture) {
        if (!fixtureMap.has(fixture)) {
            const item = {
                started: false,
                runningFixtureBeforeHook: false,
                fixtureBeforeHookErr: null,
                pendingTestRunCount: 0,
                fixtureCtx: Object.create(null),
            };
            fixtureMap.set(fixture, item);
        }
    }
    static _createFixtureMap(tests, browserConnectionCount) {
        return tests.reduce((fixtureMap, test) => {
            const fixture = test.fixture;
            if (!test.skip) {
                FixtureHookController._ensureFixtureMapItem(fixtureMap, fixture);
                const item = fixtureMap.get(fixture);
                item.pendingTestRunCount += browserConnectionCount;
            }
            return fixtureMap;
        }, new Map());
    }
    _getFixtureMapItem(test) {
        return test.skip ? null : this._fixtureMap.get(test.fixture);
    }
    isTestBlocked(test) {
        const item = this._getFixtureMapItem(test);
        return !!item && item.runningFixtureBeforeHook;
    }
    async runFixtureBeforeHookIfNecessary(testRun) {
        const fixture = testRun.test.fixture;
        const item = this._getFixtureMapItem(testRun.test);
        if (item) {
            const shouldRunBeforeHook = !item.started && fixture.beforeFn;
            item.started = true;
            if (shouldRunBeforeHook) {
                item.runningFixtureBeforeHook = true;
                try {
                    await fixture.beforeFn(item.fixtureCtx);
                }
                catch (err) {
                    item.fixtureBeforeHookErr = process_test_fn_error_1.default(err);
                }
                item.runningFixtureBeforeHook = false;
            }
            // NOTE: fail all tests in fixture if fixture.before hook has error
            if (item.fixtureBeforeHookErr) {
                testRun.phase = phase_1.default.inFixtureBeforeHook;
                testRun.addError(item.fixtureBeforeHookErr);
                return false;
            }
            testRun.fixtureCtx = item.fixtureCtx;
        }
        return true;
    }
    async runFixtureAfterHookIfNecessary(testRun) {
        var _a;
        const fixture = testRun.test.fixture;
        const item = this._getFixtureMapItem(testRun.test);
        if (!item)
            return;
        item.pendingTestRunCount--;
        if (item.pendingTestRunCount !== 0)
            return;
        if (fixture.afterFn) {
            testRun.phase = phase_1.default.inFixtureAfterHook;
            try {
                await fixture.afterFn(item.fixtureCtx);
            }
            catch (err) {
                testRun.addError(process_test_fn_error_1.default(err));
            }
        }
        if (item.fixtureCtx) {
            await ((_a = testRun.compilerService) === null || _a === void 0 ? void 0 : _a.removeFixtureCtx({
                fixtureId: fixture.id,
            }));
        }
        this._fixtureMap.delete(fixture);
    }
}
exports.default = FixtureHookController;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,