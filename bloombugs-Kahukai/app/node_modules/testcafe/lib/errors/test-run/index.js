"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipleWindowsModeIsNotAvailableInRemoteBrowserError = exports.MultipleWindowsModeIsDisabledError = exports.RequestHookNotImplementedMethodError = exports.RequestHookUnhandledError = exports.RequestHookBaseError = exports.SetNativeDialogHandlerCodeWrongTypeError = exports.RoleSwitchInRoleInitializerError = exports.ForbiddenCharactersInScreenshotPathError = exports.WindowDimensionsOverflowError = exports.UncaughtTestCafeErrorInCustomScript = exports.UncaughtErrorInCustomScript = exports.ActionUnsupportedDeviceTypeError = exports.SetTestSpeedArgumentError = exports.ActionStringArrayElementError = exports.ActionStringOrStringArrayArgumentError = exports.ActionPositiveIntegerArgumentError = exports.ActionFunctionArgumentError = exports.ActionRoleArgumentError = exports.ActionIntegerArgumentError = exports.ActionNullableStringArgumentError = exports.ActionStringArgumentError = exports.ActionOptionsTypeError = exports.ActionBooleanArgumentError = exports.AssertionUnawaitedPromiseError = exports.AssertionWithoutMethodCallError = exports.AssertionExecutableArgumentError = exports.ExternalAssertionLibraryError = exports.UncaughtExceptionError = exports.UnhandledPromiseRejectionError = exports.UncaughtNonErrorObjectInTestCode = exports.UncaughtErrorInTestCode = exports.PageLoadError = exports.ActionSelectorError = exports.MissingAwaitError = void 0;
const types_1 = require("../types");
const diff = __importStar(require("../../utils/diff/"));
const errors_1 = require("../../shared/errors");
__exportStar(require("../../shared/errors"), exports);
// Base
//--------------------------------------------------------------------
class ActionArgumentErrorBase extends errors_1.TestRunErrorBase {
    constructor(code, argumentName, actualValue) {
        super(code);
        this.argumentName = argumentName;
        this.actualValue = actualValue;
    }
}
// Synchronization errors
//--------------------------------------------------------------------
class MissingAwaitError extends errors_1.TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.missingAwaitError);
        this.callsite = callsite;
    }
}
exports.MissingAwaitError = MissingAwaitError;
// Selector errors
//--------------------------------------------------------------------
class ActionSelectorError extends errors_1.TestRunErrorBase {
    constructor(selectorName, err, isAPIError) {
        super(types_1.TEST_RUN_ERRORS.actionSelectorError);
        this.selectorName = selectorName;
        this.errMsg = isAPIError ? err.rawMessage : err.message;
        this.originError = err;
    }
}
exports.ActionSelectorError = ActionSelectorError;
// Page errors
//--------------------------------------------------------------------
class PageLoadError extends errors_1.TestRunErrorBase {
    constructor(errMsg, url) {
        super(types_1.TEST_RUN_ERRORS.pageLoadError);
        this.url = url;
        this.errMsg = errMsg;
    }
}
exports.PageLoadError = PageLoadError;
// Uncaught errors
//--------------------------------------------------------------------
class UncaughtErrorInTestCode extends errors_1.TestRunErrorBase {
    constructor(err, callsite) {
        super(types_1.TEST_RUN_ERRORS.uncaughtErrorInTestCode);
        this.errMsg = String(err.rawMessage || err);
        this.callsite = err.callsite || callsite;
        this.originError = err;
    }
}
exports.UncaughtErrorInTestCode = UncaughtErrorInTestCode;
class UncaughtNonErrorObjectInTestCode extends errors_1.TestRunErrorBase {
    constructor(obj) {
        super(types_1.TEST_RUN_ERRORS.uncaughtNonErrorObjectInTestCode);
        this.objType = typeof obj;
        this.objStr = String(obj);
    }
}
exports.UncaughtNonErrorObjectInTestCode = UncaughtNonErrorObjectInTestCode;
class UnhandledPromiseRejectionError extends errors_1.TestRunErrorBase {
    constructor(err) {
        super(types_1.TEST_RUN_ERRORS.unhandledPromiseRejection);
        this.errMsg = String(err);
    }
}
exports.UnhandledPromiseRejectionError = UnhandledPromiseRejectionError;
class UncaughtExceptionError extends errors_1.TestRunErrorBase {
    constructor(err) {
        super(types_1.TEST_RUN_ERRORS.uncaughtException);
        this.errMsg = String(err);
    }
}
exports.UncaughtExceptionError = UncaughtExceptionError;
// Assertion errors
//--------------------------------------------------------------------
class ExternalAssertionLibraryError extends errors_1.TestRunErrorBase {
    constructor(err, callsite) {
        super(types_1.TEST_RUN_ERRORS.externalAssertionLibraryError);
        this.errMsg = String(err);
        this.diff = (err === null || err === void 0 ? void 0 : err.showDiff) && diff.generate(err.actual, err.expected);
        this.callsite = callsite;
    }
}
exports.ExternalAssertionLibraryError = ExternalAssertionLibraryError;
class AssertionExecutableArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, argumentValue, err, isAPIError) {
        super(types_1.TEST_RUN_ERRORS.assertionExecutableArgumentError, argumentName, argumentValue);
        this.errMsg = isAPIError ? err.rawMessage : err.message;
        this.originError = err;
    }
}
exports.AssertionExecutableArgumentError = AssertionExecutableArgumentError;
class AssertionWithoutMethodCallError extends errors_1.TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.assertionWithoutMethodCallError);
        this.callsite = callsite;
    }
}
exports.AssertionWithoutMethodCallError = AssertionWithoutMethodCallError;
class AssertionUnawaitedPromiseError extends errors_1.TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.assertionUnawaitedPromiseError);
        this.callsite = callsite;
    }
}
exports.AssertionUnawaitedPromiseError = AssertionUnawaitedPromiseError;
// Action parameters errors
//--------------------------------------------------------------------
// Options errors
//--------------------------------------------------------------------
class ActionBooleanArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionBooleanArgumentError, argumentName, actualValue);
    }
}
exports.ActionBooleanArgumentError = ActionBooleanArgumentError;
class ActionOptionsTypeError extends errors_1.TestRunErrorBase {
    constructor(actualType) {
        super(types_1.TEST_RUN_ERRORS.actionOptionsTypeError);
        this.actualType = actualType;
    }
}
exports.ActionOptionsTypeError = ActionOptionsTypeError;
// Arguments errors
class ActionStringArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionStringArgumentError, argumentName, actualValue);
    }
}
exports.ActionStringArgumentError = ActionStringArgumentError;
class ActionNullableStringArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionNullableStringArgumentError, argumentName, actualValue);
    }
}
exports.ActionNullableStringArgumentError = ActionNullableStringArgumentError;
class ActionIntegerArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionIntegerArgumentError, argumentName, actualValue);
    }
}
exports.ActionIntegerArgumentError = ActionIntegerArgumentError;
class ActionRoleArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionRoleArgumentError, argumentName, actualValue);
    }
}
exports.ActionRoleArgumentError = ActionRoleArgumentError;
class ActionFunctionArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionFunctionArgumentError, argumentName, actualValue);
    }
}
exports.ActionFunctionArgumentError = ActionFunctionArgumentError;
class ActionPositiveIntegerArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionPositiveIntegerArgumentError, argumentName, actualValue);
    }
}
exports.ActionPositiveIntegerArgumentError = ActionPositiveIntegerArgumentError;
class ActionStringOrStringArrayArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.actionStringOrStringArrayArgumentError, argumentName, actualValue);
    }
}
exports.ActionStringOrStringArrayArgumentError = ActionStringOrStringArrayArgumentError;
class ActionStringArrayElementError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue, elementIndex) {
        super(types_1.TEST_RUN_ERRORS.actionStringArrayElementError, argumentName, actualValue);
        this.elementIndex = elementIndex;
    }
}
exports.ActionStringArrayElementError = ActionStringArrayElementError;
class SetTestSpeedArgumentError extends ActionArgumentErrorBase {
    constructor(argumentName, actualValue) {
        super(types_1.TEST_RUN_ERRORS.setTestSpeedArgumentError, argumentName, actualValue);
    }
}
exports.SetTestSpeedArgumentError = SetTestSpeedArgumentError;
class ActionUnsupportedDeviceTypeError extends ActionArgumentErrorBase {
    constructor(argumentName, argumentValue) {
        super(types_1.TEST_RUN_ERRORS.actionUnsupportedDeviceTypeError, argumentName, argumentValue);
    }
}
exports.ActionUnsupportedDeviceTypeError = ActionUnsupportedDeviceTypeError;
// Action execution errors
//--------------------------------------------------------------------
class UncaughtErrorInCustomScript extends errors_1.TestRunErrorBase {
    constructor(err, expression, line, column, callsite) {
        super(types_1.TEST_RUN_ERRORS.uncaughtErrorInCustomScript);
        this.callsite = callsite;
        this.expression = expression;
        this.line = line;
        this.column = column;
        this.originError = err;
        this.errMsg = err.message || String(err);
    }
}
exports.UncaughtErrorInCustomScript = UncaughtErrorInCustomScript;
class UncaughtTestCafeErrorInCustomScript extends errors_1.TestRunErrorBase {
    constructor(err, expression, line, column, callsite) {
        super(types_1.TEST_RUN_ERRORS.uncaughtTestCafeErrorInCustomScript);
        this.callsite = callsite;
        this.expression = expression;
        this.line = line;
        this.column = column;
        this.originError = err;
        this.errCallsite = err.callsite;
    }
}
exports.UncaughtTestCafeErrorInCustomScript = UncaughtTestCafeErrorInCustomScript;
class WindowDimensionsOverflowError extends errors_1.TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.windowDimensionsOverflowError);
        this.callsite = callsite;
    }
}
exports.WindowDimensionsOverflowError = WindowDimensionsOverflowError;
class ForbiddenCharactersInScreenshotPathError extends errors_1.TestRunErrorBase {
    constructor(screenshotPath, forbiddenCharsList) {
        super(types_1.TEST_RUN_ERRORS.forbiddenCharactersInScreenshotPathError);
        this.screenshotPath = screenshotPath;
        this.forbiddenCharsList = forbiddenCharsList;
    }
}
exports.ForbiddenCharactersInScreenshotPathError = ForbiddenCharactersInScreenshotPathError;
class RoleSwitchInRoleInitializerError extends errors_1.TestRunErrorBase {
    constructor(callsite) {
        super(types_1.TEST_RUN_ERRORS.roleSwitchInRoleInitializerError);
        this.callsite = callsite;
    }
}
exports.RoleSwitchInRoleInitializerError = RoleSwitchInRoleInitializerError;
// Native dialog errors
//--------------------------------------------------------------------
class SetNativeDialogHandlerCodeWrongTypeError extends errors_1.TestRunErrorBase {
    constructor(actualType) {
        super(types_1.TEST_RUN_ERRORS.setNativeDialogHandlerCodeWrongTypeError);
        this.actualType = actualType;
    }
}
exports.SetNativeDialogHandlerCodeWrongTypeError = SetNativeDialogHandlerCodeWrongTypeError;
class RequestHookBaseError extends errors_1.TestRunErrorBase {
    constructor(code, hookClassName, methodName) {
        super(code);
        this.hookClassName = hookClassName;
        this.methodName = methodName;
    }
}
exports.RequestHookBaseError = RequestHookBaseError;
class RequestHookUnhandledError extends RequestHookBaseError {
    constructor(err, hookClassName, methodName) {
        super(types_1.TEST_RUN_ERRORS.requestHookUnhandledError, hookClassName, methodName);
        this.errMsg = String(err);
    }
}
exports.RequestHookUnhandledError = RequestHookUnhandledError;
class RequestHookNotImplementedMethodError extends RequestHookBaseError {
    constructor(methodName, hookClassName) {
        super(types_1.TEST_RUN_ERRORS.requestHookNotImplementedError, hookClassName, methodName);
    }
}
exports.RequestHookNotImplementedMethodError = RequestHookNotImplementedMethodError;
class MultipleWindowsModeIsDisabledError extends errors_1.TestRunErrorBase {
    constructor(methodName) {
        super(types_1.TEST_RUN_ERRORS.multipleWindowsModeIsDisabledError);
        this.methodName = methodName;
    }
}
exports.MultipleWindowsModeIsDisabledError = MultipleWindowsModeIsDisabledError;
class MultipleWindowsModeIsNotAvailableInRemoteBrowserError extends errors_1.TestRunErrorBase {
    constructor(methodName) {
        super(types_1.TEST_RUN_ERRORS.multipleWindowsModeIsNotSupportedInRemoteBrowserError);
        this.methodName = methodName;
    }
}
exports.MultipleWindowsModeIsNotAvailableInRemoteBrowserError = MultipleWindowsModeIsNotAvailableInRemoteBrowserError;
//# sourceMappingURL=data:application/json;base64,