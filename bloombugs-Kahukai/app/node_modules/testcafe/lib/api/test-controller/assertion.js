"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assertion_1 = __importDefault(require("../../test-run/commands/assertion"));
const type_1 = __importDefault(require("../../assertions/type"));
const test_run_1 = require("../../errors/test-run");
class Assertion {
    constructor(actual, testController, callsite) {
        this._testController = testController;
        this._actual = actual;
        this._callsite = callsite;
    }
    then() {
        throw new test_run_1.AssertionWithoutMethodCallError(this._callsite);
    }
    _enqueueAssertion(apiMethodName, assertionArgs) {
        let options = assertionArgs.opts || {};
        let message = assertionArgs.message;
        // NOTE: Assertion options should be specified after the 'message' parameter.
        // await t.expect(42).eql(43, 'wrong value', { timeout: 10000 });
        // In case of empty assertion message we allowing to specify assertion option in place of assertion message.
        // await t.expect(42).eql(43, { timeout: 10000 });
        if (typeof message === 'object') {
            options = assertionArgs.message;
            message = void 0;
        }
        return this._testController._enqueueCommand(apiMethodName, assertion_1.default, {
            assertionType: apiMethodName,
            actual: this._actual,
            expected: assertionArgs.expected,
            expected2: assertionArgs.expected2,
            message: message,
            options: { timeout: options.timeout, allowUnawaitedPromise: options.allowUnawaitedPromise },
        });
    }
    eql(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.eql, { expected, message, opts });
    }
    notEql(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.notEql, { expected, message, opts });
    }
    ok(message, opts) {
        return this._enqueueAssertion(type_1.default.ok, { message, opts });
    }
    notOk(message, opts) {
        return this._enqueueAssertion(type_1.default.notOk, { message, opts });
    }
    contains(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.contains, { expected, message, opts });
    }
    notContains(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.notContains, { expected, message, opts });
    }
    typeOf(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.typeOf, { expected, message, opts });
    }
    notTypeOf(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.notTypeOf, { expected, message, opts });
    }
    gt(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.gt, { expected, message, opts });
    }
    gte(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.gte, { expected, message, opts });
    }
    lt(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.lt, { expected, message, opts });
    }
    lte(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.lte, { expected, message, opts });
    }
    within(start, finish, message, opts) {
        // NOTE: `within` is not available in Chai `assert` interface.
        return this._enqueueAssertion(type_1.default.within, { expected: start, expected2: finish, message, opts });
    }
    notWithin(start, finish, message, opts) {
        return this._enqueueAssertion(type_1.default.notWithin, { expected: start, expected2: finish, message, opts });
    }
    match(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.match, { expected, message, opts });
    }
    notMatch(expected, message, opts) {
        return this._enqueueAssertion(type_1.default.notMatch, { expected, message, opts });
    }
}
exports.default = Assertion;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,