"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../../../../../../shared/errors");
const EXECUTION_CTX_WAS_DESTROYED_CODE = -32000;
const SELECTOR_MAX_EXECUTE_COUNT = 10;
const PROXYLESS_SCRIPT = 'window["%proxyless%"]';
class ClientFunctionExecutor {
    constructor() {
        // new Map<frameId, executionContextId>
        this._frameExecutionContexts = new Map();
        this._currentFrameId = '';
    }
    async evaluateScript(Runtime, expression) {
        const script = { expression, awaitPromise: true };
        if (this._currentFrameId && this._frameExecutionContexts.has(this._currentFrameId))
            script.contextId = this._frameExecutionContexts.get(this._currentFrameId);
        try {
            const { result, exceptionDetails = null } = await Runtime.evaluate(script);
            return { result, exceptionDetails, error: null };
        }
        catch (error) {
            return { result: null, exceptionDetails: null, error };
        }
    }
    async _evaluateScriptWithReloadPageIgnore(Runtime, expression) {
        let attempts = 0;
        let result;
        let exceptionDetails;
        let error;
        while (attempts++ < SELECTOR_MAX_EXECUTE_COUNT) {
            ({ result, exceptionDetails, error } = await this.evaluateScript(Runtime, expression));
            if (error && error.response.code === EXECUTION_CTX_WAS_DESTROYED_CODE)
                continue;
            break;
        }
        // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion
        return { result, exceptionDetails, error };
    }
    static _getPropertyByName(properties, name) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return properties.find(prop => prop.name === name).value;
    }
    static _throwException(details, command, callsite) {
        var _a;
        const exception = details.exception;
        if (exception) {
            const className = exception.className;
            const properties = (_a = exception.preview) === null || _a === void 0 ? void 0 : _a.properties;
            if (className === errors_1.UncaughtErrorInCustomDOMPropertyCode.name) {
                throw new errors_1.UncaughtErrorInCustomDOMPropertyCode(command.instantiationCallsiteName, ClientFunctionExecutor._getPropertyByName(properties, 'errMsg'), ClientFunctionExecutor._getPropertyByName(properties, 'property'), callsite);
            }
            else if (className === errors_1.CannotObtainInfoForElementSpecifiedBySelectorError.name) {
                throw new errors_1.CannotObtainInfoForElementSpecifiedBySelectorError(callsite, {
                    apiFnChain: command.apiFnChain,
                    apiFnIndex: parseInt(ClientFunctionExecutor._getPropertyByName(properties, 'apiFnIndex'), 10),
                });
            }
            else if (className === errors_1.DomNodeClientFunctionResultError.name)
                throw new errors_1.DomNodeClientFunctionResultError(command.instantiationCallsiteName, callsite);
            else if (className === errors_1.InvalidSelectorResultError.name)
                throw new errors_1.InvalidSelectorResultError(callsite);
        }
        throw new errors_1.UncaughtErrorInClientFunctionCode(command.instantiationCallsiteName, details.text, callsite);
    }
    async executeClientFunction(Runtime, command, callsite) {
        const expression = `${PROXYLESS_SCRIPT}.executeClientFunctionCommand(${JSON.stringify(command)});`;
        const { result, exceptionDetails, error } = await this.evaluateScript(Runtime, expression);
        if (error) {
            if (error.response.code === EXECUTION_CTX_WAS_DESTROYED_CODE)
                throw new errors_1.ClientFunctionExecutionInterruptionError(command.instantiationCallsiteName, callsite);
            throw error;
        }
        if (exceptionDetails)
            ClientFunctionExecutor._throwException(exceptionDetails, command, callsite);
        return JSON.parse(result.value); // eslint-disable-line @typescript-eslint/no-non-null-assertion
    }
    async executeSelector(Runtime, command, callsite, selectorTimeout) {
        const expression = `${PROXYLESS_SCRIPT}.executeSelectorCommand(${JSON.stringify(command)}, ${selectorTimeout}, ${Date.now()});`;
        const { result, exceptionDetails, error } = await this._evaluateScriptWithReloadPageIgnore(Runtime, expression);
        if (error)
            throw error;
        if (exceptionDetails)
            ClientFunctionExecutor._throwException(exceptionDetails, command, callsite);
        return JSON.parse(result.value); // eslint-disable-line @typescript-eslint/no-non-null-assertion
    }
    setupFramesWatching(Runtime) {
        Runtime.on('executionContextCreated', (event) => {
            var _a;
            if (!((_a = event.context.auxData) === null || _a === void 0 ? void 0 : _a.frameId))
                return;
            this._frameExecutionContexts.set(event.context.auxData.frameId, event.context.id);
        });
        Runtime.on('executionContextDestroyed', (event) => {
            for (const [frameId, executionContextId] of this._frameExecutionContexts.entries()) {
                if (executionContextId === event.executionContextId)
                    this._frameExecutionContexts.delete(frameId);
            }
        });
        Runtime.on('executionContextsCleared', () => {
            this._currentFrameId = '';
            this._frameExecutionContexts.clear();
        });
    }
    setCurrentFrameId(frameId) {
        this._currentFrameId = frameId;
    }
}
exports.default = ClientFunctionExecutor;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,