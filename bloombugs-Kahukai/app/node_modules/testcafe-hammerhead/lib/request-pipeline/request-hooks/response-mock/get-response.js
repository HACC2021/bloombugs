"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const incoming_message_like_1 = __importDefault(require("../../incoming-message-like"));
const builtin_header_names_1 = __importDefault(require("../../builtin-header-names"));
const lowercase_header_names_1 = __importDefault(require("./lowercase-header-names"));
const content_type_1 = require("../../../utils/content-type");
const setBodyMethod = __importStar(require("./set-body-method"));
const PAGE_CONTENT_TYPE = 'text/html; charset=utf-8';
const EMPTY_PAGE_HTML = '<html><body></body></html>';
function getContentType(body) {
    if (body !== null && typeof body === 'object')
        return content_type_1.JSON_MIME;
    return PAGE_CONTENT_TYPE;
}
async function default_1(mock) {
    let response = {
        headers: { [builtin_header_names_1.default.contentType]: getContentType(mock.body) },
        statusCode: mock.statusCode
    };
    if (mock.headers)
        response.headers = Object.assign(response.headers, mock.headers);
    if (mock.body === void 0)
        response.body = EMPTY_PAGE_HTML;
    else if (typeof mock.body === 'function') {
        setBodyMethod.add(response);
        response = Object.assign(response, await mock.body(mock.requestOptions, response));
        setBodyMethod.remove(response);
    }
    else
        response.body = mock.body;
    response.headers = lowercase_header_names_1.default(response.headers);
    return new incoming_message_like_1.default(response);
}
exports.default = default_1;module.exports = exports.default;

