"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tough_cookie_1 = require("tough-cookie");
const cookie_limit_1 = __importDefault(require("./cookie-limit"));
const lodash_1 = require("lodash");
const url_1 = require("../utils/url");
const json_1 = require("../utils/json");
const LOCALHOST_DOMAIN = 'localhost';
const LOCALHOST_IP = '127.0.0.1';
class Cookies {
    constructor() {
        this._cookieJar = new tough_cookie_1.CookieJar();
    }
    static _hasLocalhostDomain(cookie) {
        if (cookie)
            return cookie.domain === LOCALHOST_DOMAIN || cookie.domain === LOCALHOST_IP;
        return false;
    }
    _set(url, cookies, isClient) {
        cookies = lodash_1.castArray(cookies);
        return cookies.reduce((resultCookies, cookieStr) => {
            let cookie;
            if (!isClient) {
                if (cookieStr.length > cookie_limit_1.default)
                    return resultCookies;
                cookie = tough_cookie_1.Cookie.parse(cookieStr, { loose: true });
                if (!cookie)
                    return resultCookies;
            }
            else
                cookie = cookieStr;
            // NOTE: If cookie.domain and url hostname are equal to localhost/127.0.0.1,
            // we should remove 'Domain=...' form cookieStr (GH-1491)
            if (Cookies._hasLocalhostDomain(cookie) && (isClient || url_1.parseUrl(url).hostname === cookie.domain))
                cookie.domain = '';
            const parsedCookie = this._cookieJar.setCookieSync(cookie, url, {
                http: !isClient,
                ignoreError: true,
                loose: true
            });
            if (parsedCookie)
                resultCookies.push(parsedCookie);
            return resultCookies;
        }, []);
    }
    serializeJar() {
        return json_1.stringify(this._cookieJar.serializeSync());
    }
    setJar(serializedJar) {
        this._cookieJar = serializedJar
            ? tough_cookie_1.CookieJar.deserializeSync(json_1.parse(serializedJar))
            : new tough_cookie_1.CookieJar();
    }
    setByServer(url, cookies) {
        return this._set(url, cookies, false);
    }
    setByClient(syncCookies) {
        for (const syncCookie of syncCookies) {
            const cookie = new tough_cookie_1.Cookie(syncCookie);
            const url = { hostname: syncCookie.domain, pathname: syncCookie.path };
            this._set(url, cookie, true);
        }
    }
    getClientString(url) {
        return this._cookieJar.getCookieStringSync(url, { http: false });
    }
    getHeader(url) {
        return this._cookieJar.getCookieStringSync(url, { http: true }) || null;
    }
}
exports.default = Cookies;module.exports = exports.default;

