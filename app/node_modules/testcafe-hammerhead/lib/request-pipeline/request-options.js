"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const builtin_header_names_1 = __importDefault(require("./builtin-header-names"));
const headerTransforms = __importStar(require("./header-transforms"));
const upload_1 = require("../upload");
const match_url_wildcard_1 = __importDefault(require("match-url-wildcard"));
const header_transforms_1 = require("./header-transforms");
class RequestOptions {
    constructor(ctx) {
        const bodyWithUploads = upload_1.inject(ctx.req.headers[builtin_header_names_1.default.contentType], ctx.reqBody);
        // NOTE: First, we should rewrite the request body, because the 'content-length' header will be built based on it.
        if (bodyWithUploads)
            ctx.reqBody = bodyWithUploads;
        // NOTE: All headers, including 'content-length', are built here.
        const headers = headerTransforms.forRequest(ctx);
        const proxy = ctx.session.externalProxySettings;
        this.url = ctx.dest.url;
        this.protocol = ctx.dest.protocol;
        this.hostname = ctx.dest.hostname;
        this.host = ctx.dest.host;
        this.port = ctx.dest.port;
        this.path = ctx.dest.partAfterHost;
        this.auth = ctx.dest.auth;
        this.method = ctx.req.method || '';
        this.credentials = ctx.session.getAuthCredentials();
        this.body = ctx.reqBody;
        this.isAjax = ctx.isAjax;
        this.rawHeaders = ctx.req.rawHeaders;
        this.headers = headers;
        this.requestId = ctx.requestId;
        this.requestTimeout = ctx.session.options.requestTimeout;
        this.isWebSocket = ctx.isWebSocket;
        this.disableHttp2 = ctx.session.isHttp2Disabled();
        this._applyExternalProxySettings(proxy, ctx, headers);
    }
    _applyExternalProxySettings(proxy, ctx, headers) {
        if (!proxy || match_url_wildcard_1.default(ctx.dest.url, proxy.bypassRules))
            return;
        this.proxy = proxy;
        if (ctx.dest.protocol === 'http:') {
            this.path = this.protocol + '//' + this.host + this.path;
            this.host = proxy.host;
            this.hostname = proxy.hostname;
            this.port = proxy.port;
            if (proxy.authHeader)
                headers[builtin_header_names_1.default.proxyAuthorization] = proxy.authHeader;
        }
    }
    get isHttps() {
        return this.protocol === 'https:';
    }
    ignoreSSLAuth() {
        this.rejectUnauthorized = false;
        this.ecdhCurve = 'auto';
    }
    prepare() {
        // NOTE: The headers are converted to raw headers because some sites ignore headers in a lower case. (GH-1380)
        // We also need to restore the request option headers to a lower case because headers may change
        // if a request is unauthorized, so there can be duplicated headers, for example, 'www-authenticate' and 'WWW-Authenticate'.
        const transformedHeaders = header_transforms_1.transformHeadersCaseToRaw(this.headers, this.rawHeaders);
        const clonedReqOptions = Object.assign({}, this);
        clonedReqOptions['headers'] = transformedHeaders;
        return clonedReqOptions;
    }
}
exports.default = RequestOptions;module.exports = exports.default;

