"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectField = void 0;
var tslib_1 = require("tslib");
var mapValues_1 = tslib_1.__importDefault(require("lodash/mapValues"));
var react_1 = tslib_1.__importDefault(require("react"));
var context_1 = require("./context");
var useField_1 = require("./useField");
function connectField(Component, options) {
    function Field(props) {
        var _a = useField_1.useField(props.name, props, options), fieldProps = _a[0], context = _a[1];
        var hasChainName = props.name !== '';
        var anyFlowingPropertySet = Object.keys(context.state).some(function (key) {
            var next = props[key];
            return next !== null && next !== undefined;
        });
        if (!anyFlowingPropertySet && !hasChainName) {
            return react_1.default.createElement(Component, tslib_1.__assign({}, props, fieldProps));
        }
        var nextContext = tslib_1.__assign({}, context);
        if (anyFlowingPropertySet) {
            nextContext.state = mapValues_1.default(nextContext.state, function (prev, key) {
                var next = props[key];
                return next !== null && next !== undefined ? !!next : prev;
            });
        }
        if (hasChainName) {
            nextContext.name = nextContext.name.concat(props.name);
        }
        return (react_1.default.createElement(context_1.context.Provider, { value: nextContext },
            react_1.default.createElement(Component, tslib_1.__assign({}, props, fieldProps))));
    }
    Field.displayName = (Component.displayName || Component.name) + "Field";
    return Object.assign(Field, { Component: Component, options: options });
}
exports.connectField = connectField;
