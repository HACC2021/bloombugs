"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseForm = void 0;
var tslib_1 = require("tslib");
var clone_1 = tslib_1.__importDefault(require("lodash/clone"));
var get_1 = tslib_1.__importDefault(require("lodash/get"));
var omit_1 = tslib_1.__importDefault(require("lodash/omit"));
var setWith_1 = tslib_1.__importDefault(require("lodash/setWith"));
var react_1 = tslib_1.__importStar(require("react"));
var changedKeys_1 = require("./changedKeys");
var context_1 = require("./context");
var randomIds_1 = require("./randomIds");
var BaseForm = /** @class */ (function (_super) {
    tslib_1.__extends(BaseForm, _super);
    function BaseForm(props) {
        var _this = _super.call(this, props) || this;
        // @ts-expect-error: State may be bigger, but it'll be covered by the subclasses.
        _this.state = {
            changed: false,
            changedMap: Object.create(null),
            resetCount: 0,
            submitted: false,
            submitting: false,
        };
        _this.mounted = false;
        _this.randomId = randomIds_1.randomIds(_this.props.id);
        _this.onReset = _this.reset = _this.onReset.bind(_this);
        _this.onChange = _this.change = _this.onChange.bind(_this);
        _this.onSubmit = _this.submit = _this.onSubmit.bind(_this);
        // TODO: It shouldn't be here
        var getModel = _this.getModel.bind(_this);
        _this.getModel = function (mode, model) {
            if (model === void 0) { model = getModel(mode); }
            return mode !== undefined && _this.props.modelTransform
                ? _this.props.modelTransform(mode, model)
                : model;
        };
        return _this;
    }
    BaseForm.prototype.componentDidMount = function () {
        this.mounted = true;
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    BaseForm.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) { };
    BaseForm.prototype.componentWillUnmount = function () {
        this.mounted = false;
        if (this.delayId) {
            clearTimeout(this.delayId);
        }
    };
    BaseForm.prototype.getContext = function () {
        return {
            changed: this.state.changed,
            changedMap: this.state.changedMap,
            error: this.getContextError(),
            model: this.getContextModel(),
            name: this.getContextName(),
            onChange: this.getContextOnChange(),
            onSubmit: this.getContextOnSubmit(),
            randomId: this.randomId,
            schema: this.getContextSchema(),
            state: this.getContextState(),
            submitting: this.state.submitting,
            validating: false,
            submitted: this.state.submitted,
        };
    };
    BaseForm.prototype.getContextName = function () {
        return [];
    };
    BaseForm.prototype.getContextError = function () {
        return this.props.error;
    };
    BaseForm.prototype.getContextModel = function () {
        return this.getModel('form');
    };
    BaseForm.prototype.getContextState = function () {
        return {
            disabled: !!this.props.disabled,
            label: !!this.props.label,
            placeholder: !!this.props.placeholder,
            readOnly: !!this.props.readOnly,
            showInlineError: !!this.props.showInlineError,
        };
    };
    BaseForm.prototype.getContextSchema = function () {
        return this.props.schema;
    };
    BaseForm.prototype.getContextOnChange = function () {
        // It's bound in constructor.
        // eslint-disable-next-line @typescript-eslint/unbound-method
        return this.onChange;
    };
    BaseForm.prototype.getContextOnSubmit = function () {
        // It's bound in constructor.
        // eslint-disable-next-line @typescript-eslint/unbound-method
        return this.onSubmit;
    };
    BaseForm.prototype.getModel = function (mode, model) {
        if (model === void 0) { model = this.props.model; }
        return model;
    };
    BaseForm.prototype.getNativeFormProps = function () {
        var props = omit_1.default(this.props, [
            'autosave',
            'autosaveDelay',
            'disabled',
            'error',
            'label',
            'model',
            'modelTransform',
            'onChange',
            'onSubmit',
            'placeholder',
            'readOnly',
            'schema',
            'showInlineError',
        ]);
        return tslib_1.__assign(tslib_1.__assign({}, props), { 
            // It's bound in constructor.
            // eslint-disable-next-line @typescript-eslint/unbound-method
            onSubmit: this.onSubmit, key: "reset-" + this.state.resetCount });
    };
    BaseForm.prototype.onChange = function (key, value) {
        var _this = this;
        // Do not set `changed` before componentDidMount
        if (this.mounted) {
            var keys_1 = changedKeys_1.changedKeys(key, value, get_1.default(this.getModel(), key));
            if (keys_1.length !== 0) {
                this.setState(function (state) {
                    // If all are already marked, we can skip the update completely.
                    return state.changed && keys_1.every(function (key) { return !!get_1.default(state.changedMap, key); })
                        ? null
                        : {
                            changed: true,
                            changedMap: keys_1.reduce(function (changedMap, key) { return setWith_1.default(changedMap, key, {}, clone_1.default); }, clone_1.default(state.changedMap)),
                        };
                });
            }
        }
        if (this.props.onChange) {
            this.props.onChange(key, value);
        }
        // Do not call `onSubmit` before componentDidMount
        if (this.mounted && this.props.autosave) {
            if (this.delayId) {
                this.delayId = clearTimeout(this.delayId);
            }
            // Delay autosave by `autosaveDelay` milliseconds...
            this.delayId = setTimeout(function () {
                // ...and wait for all scheduled `setState`s to commit. This is required
                // for AutoForm to validate correct model, waiting in `onChange`.
                _this.setState(function () { return null; }, function () {
                    _this.onSubmit();
                });
            }, this.props.autosaveDelay);
        }
    };
    BaseForm.prototype.__reset = function (state) {
        return {
            changed: false,
            changedMap: Object.create(null),
            resetCount: state.resetCount + 1,
            submitted: false,
            submitting: false,
        };
    };
    BaseForm.prototype.onReset = function () {
        // @ts-expect-error
        // It's bound in constructor.
        // eslint-disable-next-line @typescript-eslint/unbound-method
        this.setState(this.__reset);
    };
    BaseForm.prototype.onSubmit = function (event) {
        var _this = this;
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.setState(function (state) { return (state.submitted ? null : { submitted: true }); });
        var result = this.props.onSubmit(this.getModel('submit'));
        if (!(result instanceof Promise)) {
            return Promise.resolve();
        }
        this.setState({ submitting: true });
        return result.finally(function () {
            _this.setState({ submitting: false });
        });
    };
    BaseForm.prototype.render = function () {
        return (react_1.default.createElement(context_1.context.Provider, { value: this.getContext() },
            react_1.default.createElement("form", tslib_1.__assign({}, this.getNativeFormProps()))));
    };
    BaseForm.displayName = 'Form';
    BaseForm.defaultProps = {
        autosave: false,
        autosaveDelay: 0,
        error: null,
        label: true,
        model: Object.create(null),
        noValidate: true,
        onSubmit: function () { },
    };
    return BaseForm;
}(react_1.Component));
exports.BaseForm = BaseForm;
