import mapValues from 'lodash/mapValues';
import React from 'react';
import { context as contextReference } from './context';
import { useField } from './useField';
export function connectField(Component, options) {
    function Field(props) {
        const [fieldProps, context] = useField(props.name, props, options);
        const hasChainName = props.name !== '';
        const anyFlowingPropertySet = Object.keys(context.state).some(key => {
            const next = props[key];
            return next !== null && next !== undefined;
        });
        if (!anyFlowingPropertySet && !hasChainName) {
            return React.createElement(Component, Object.assign({}, props, fieldProps));
        }
        const nextContext = Object.assign({}, context);
        if (anyFlowingPropertySet) {
            nextContext.state = mapValues(nextContext.state, (prev, key) => {
                const next = props[key];
                return next !== null && next !== undefined ? !!next : prev;
            });
        }
        if (hasChainName) {
            nextContext.name = nextContext.name.concat(props.name);
        }
        return (React.createElement(contextReference.Provider, { value: nextContext },
            React.createElement(Component, Object.assign({}, props, fieldProps))));
    }
    Field.displayName = `${Component.displayName || Component.name}Field`;
    return Object.assign(Field, { Component, options });
}
