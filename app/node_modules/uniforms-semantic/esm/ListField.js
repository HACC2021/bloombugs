import { __assign, __rest } from "tslib";
import classnames from 'classnames';
import React, { Children, cloneElement, isValidElement } from 'react';
import { connectField, filterDOMProps } from 'uniforms';
import ListAddField from './ListAddField';
import ListItemField from './ListItemField';
function List(_a) {
    var _b = _a.children, children = _b === void 0 ? React.createElement(ListItemField, { name: "$" }) : _b, className = _a.className, disabled = _a.disabled, error = _a.error, errorMessage = _a.errorMessage, initialCount = _a.initialCount, itemProps = _a.itemProps, label = _a.label, required = _a.required, showInlineError = _a.showInlineError, value = _a.value, props = __rest(_a, ["children", "className", "disabled", "error", "errorMessage", "initialCount", "itemProps", "label", "required", "showInlineError", "value"]);
    return (React.createElement("div", __assign({ className: classnames('ui', className, { disabled: disabled }, 'grouped fitted fields list') }, filterDOMProps(props)),
        label && (React.createElement("div", { className: classnames({ error: error, required: required }, 'field item') },
            React.createElement("label", { className: "left floated" }, label),
            React.createElement(ListAddField, { className: "right floated", initialCount: initialCount, name: "$" }))),
        label && (React.createElement("div", { className: "ui fitted hidden clearing horizontal divider" })),
        !!(error && showInlineError) && (React.createElement("div", { className: "ui red basic label" }, errorMessage)), value === null || value === void 0 ? void 0 :
        value.map(function (item, itemIndex) {
            return Children.map(children, function (child, childIndex) {
                var _a;
                return isValidElement(child)
                    ? cloneElement(child, __assign({ key: itemIndex + "-" + childIndex, name: (_a = child.props.name) === null || _a === void 0 ? void 0 : _a.replace('$', '' + itemIndex) }, itemProps))
                    : child;
            });
        })));
}
export default connectField(List);
