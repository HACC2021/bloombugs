"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var xor_1 = tslib_1.__importDefault(require("lodash/xor"));
var react_1 = tslib_1.__importDefault(require("react"));
var uniforms_1 = require("uniforms");
var base64 = typeof btoa === 'undefined'
    ? /* istanbul ignore next */ function (/* istanbul ignore next */ x) { return Buffer.from(x).toString('base64'); }
    : btoa;
var escape = function (x) { return base64(encodeURIComponent(x)).replace(/=+$/, ''); };
var selectStyle = { paddingBottom: 0, paddingTop: 0 };
function Select(_a) {
    var allowedValues = _a.allowedValues, checkboxes = _a.checkboxes, className = _a.className, disableItem = _a.disableItem, disabled = _a.disabled, error = _a.error, errorMessage = _a.errorMessage, fieldType = _a.fieldType, id = _a.id, inputRef = _a.inputRef, label = _a.label, name = _a.name, onChange = _a.onChange, placeholder = _a.placeholder, readOnly = _a.readOnly, required = _a.required, showInlineError = _a.showInlineError, transform = _a.transform, value = _a.value, props = tslib_1.__rest(_a, ["allowedValues", "checkboxes", "className", "disableItem", "disabled", "error", "errorMessage", "fieldType", "id", "inputRef", "label", "name", "onChange", "placeholder", "readOnly", "required", "showInlineError", "transform", "value"]);
    var multiple = fieldType === Array;
    return (react_1.default.createElement("div", tslib_1.__assign({ className: classnames_1.default({ disabled: disabled, error: error, required: required }, className, 'field') }, uniforms_1.filterDOMProps(props)),
        label && react_1.default.createElement("label", { htmlFor: id }, label),
        checkboxes ? (allowedValues === null || allowedValues === void 0 ? void 0 : allowedValues.map(function (item) { return (react_1.default.createElement("div", { className: "field", key: item },
            react_1.default.createElement("div", { className: "ui checkbox" },
                react_1.default.createElement("input", { checked: multiple ? value === null || value === void 0 ? void 0 : value.includes(item) : value === item, disabled: (disableItem === null || disableItem === void 0 ? void 0 : disableItem(item)) || disabled, id: id + "-" + escape(item), name: name, onChange: function () {
                        if (!readOnly) {
                            onChange(multiple ? xor_1.default([item], value) : item);
                        }
                    }, type: "checkbox" }),
                react_1.default.createElement("label", { htmlFor: id + "-" + escape(item) }, transform ? transform(item) : item)))); })) : (react_1.default.createElement("select", { className: "ui selection dropdown", disabled: disabled, id: id, multiple: multiple, name: name, onChange: function (event) {
                if (!readOnly) {
                    var item = event.target.value;
                    if (multiple) {
                        var clear = event.target.selectedIndex === -1;
                        onChange(clear ? [] : xor_1.default([item], value));
                    }
                    else {
                        onChange(item !== '' ? item : undefined);
                    }
                }
            }, ref: inputRef, style: selectStyle, value: value !== null && value !== void 0 ? value : '' },
            (!!placeholder || !required || value === undefined) && !multiple && (react_1.default.createElement("option", { value: "", disabled: required, hidden: required }, placeholder || label)), allowedValues === null || allowedValues === void 0 ? void 0 :
            allowedValues.map(function (value) { return (react_1.default.createElement("option", { disabled: disableItem === null || disableItem === void 0 ? void 0 : disableItem(value), key: value, value: value }, transform ? transform(value) : value)); }))),
        !!(error && showInlineError) && (react_1.default.createElement("div", { className: "ui red basic pointing label" }, errorMessage))));
}
exports.default = uniforms_1.connectField(Select, { kind: 'leaf' });
