"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_transform_1 = __importDefault(require("../base-transform"));
const base_1 = __importDefault(require("../../../../../test-run/commands/base"));
const utils_1 = require("../../../../../test-run/commands/utils");
const actions_1 = require("../../../../../test-run/commands/actions");
const command_constructors_1 = __importDefault(require("./command-constructors"));
const assertion_1 = __importDefault(require("../../../../../test-run/commands/assertion"));
const OBSERVABLE_COMMAND_CONSTRUCTORS_WITH_SKIPPED_ARGUMENT_VALIDATION = [
    assertion_1.default,
    actions_1.ExecuteExpressionCommand,
];
class CommandBaseTransform extends base_transform_1.default {
    constructor() {
        super('CommandBase');
    }
    shouldTransform(_, val) {
        return val instanceof base_1.default;
    }
    _skipArgumentValidation(CommandCtor, value) {
        return utils_1.isObservationCommand(value) &&
            !OBSERVABLE_COMMAND_CONSTRUCTORS_WITH_SKIPPED_ARGUMENT_VALIDATION.includes(CommandCtor);
    }
    _createCommandInstance(CommandCtor, value) {
        // NOTE: We should not validate the command creation here
        // since it was already done before action execution
        const testRunStub = {};
        const validateProperties = false;
        if (this._skipArgumentValidation(CommandCtor, value))
            return new CommandCtor(value, testRunStub);
        else if (CommandCtor === actions_1.SetNativeDialogHandlerCommand)
            return actions_1.SetNativeDialogHandlerCommand.from(value);
        return new CommandCtor(value, testRunStub, validateProperties);
    }
    fromSerializable(value) {
        const CommandCtor = command_constructors_1.default.get(value.type);
        if (!CommandCtor)
            throw new Error(`An appropriate command constructor for "${value.type}" type was not found.`);
        return this._createCommandInstance(CommandCtor, value);
    }
}
exports.default = CommandBaseTransform;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2VydmljZXMvc2VyaWFsaXphdGlvbi9yZXBsaWNhdG9yL3RyYW5zZm9ybXMvY29tbWFuZC1iYXNlLXRyYXNmb3JtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUVBQThDO0FBQzlDLGlGQUFnRTtBQUVoRSxrRUFBOEU7QUFFOUUsc0VBQW1IO0FBQ25ILGtGQUEwRDtBQUUxRCwyRkFBMEU7QUFFMUUsTUFBTSxnRUFBZ0UsR0FBRztJQUNyRSxtQkFBZ0I7SUFDaEIsa0NBQXdCO0NBQzNCLENBQUM7QUFFRixNQUFxQixvQkFBcUIsU0FBUSx3QkFBYTtJQUMzRDtRQUNJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sZUFBZSxDQUFFLENBQVUsRUFBRSxHQUFZO1FBQzVDLE9BQU8sR0FBRyxZQUFZLGNBQVcsQ0FBQztJQUN0QyxDQUFDO0lBRU8sdUJBQXVCLENBQUUsV0FBK0IsRUFBRSxLQUF3QjtRQUN0RixPQUFPLDRCQUFvQixDQUFDLEtBQUssQ0FBQztZQUM5QixDQUFDLGdFQUFnRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRU8sc0JBQXNCLENBQUUsV0FBK0IsRUFBRSxLQUF3QjtRQUNyRix5REFBeUQ7UUFDekQsb0RBQW9EO1FBQ3BELE1BQU0sV0FBVyxHQUFVLEVBQUUsQ0FBQztRQUM5QixNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUVqQyxJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDO1lBQ2hELE9BQU8sSUFBSyxXQUFzQyxDQUFDLEtBQUssRUFBRSxXQUFzQixDQUFDLENBQUM7YUFFakYsSUFBSSxXQUFXLEtBQUssdUNBQTZCO1lBQ2xELE9BQU8sdUNBQTZCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXJELE9BQU8sSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQXNCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU0sZ0JBQWdCLENBQUUsS0FBd0I7UUFDN0MsTUFBTSxXQUFXLEdBQUcsOEJBQW9CLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV6RCxJQUFJLENBQUMsV0FBVztZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLEtBQUssQ0FBQyxJQUFJLHVCQUF1QixDQUFDLENBQUM7UUFFbEcsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDSjtBQXJDRCx1Q0FxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZVRyYW5zZm9ybSBmcm9tICcuLi9iYXNlLXRyYW5zZm9ybSc7XG5pbXBvcnQgQ29tbWFuZEJhc2UgZnJvbSAnLi4vLi4vLi4vLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvYmFzZSc7XG5pbXBvcnQgeyBTZXJpYWxpemVkQ29tbWFuZCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgaXNPYnNlcnZhdGlvbkNvbW1hbmQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy91dGlscyc7XG5pbXBvcnQgVGVzdFJ1biBmcm9tICcuLi8uLi8uLi8uLi8uLi90ZXN0LXJ1bic7XG5pbXBvcnQgeyBFeGVjdXRlRXhwcmVzc2lvbkNvbW1hbmQsIFNldE5hdGl2ZURpYWxvZ0hhbmRsZXJDb21tYW5kIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvYWN0aW9ucyc7XG5pbXBvcnQgQ09NTUFORF9DT05TVFJVQ1RPUlMgZnJvbSAnLi9jb21tYW5kLWNvbnN0cnVjdG9ycyc7XG5pbXBvcnQgeyBDb21tYW5kQ29uc3RydWN0b3IsIE9ic2VydmF0aW9uQ29uc3RydWN0b3IgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBBc3NlcnRpb25Db21tYW5kIGZyb20gJy4uLy4uLy4uLy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL2Fzc2VydGlvbic7XG5cbmNvbnN0IE9CU0VSVkFCTEVfQ09NTUFORF9DT05TVFJVQ1RPUlNfV0lUSF9TS0lQUEVEX0FSR1VNRU5UX1ZBTElEQVRJT04gPSBbXG4gICAgQXNzZXJ0aW9uQ29tbWFuZCxcbiAgICBFeGVjdXRlRXhwcmVzc2lvbkNvbW1hbmQsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tYW5kQmFzZVRyYW5zZm9ybSBleHRlbmRzIEJhc2VUcmFuc2Zvcm0ge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKCdDb21tYW5kQmFzZScpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG91bGRUcmFuc2Zvcm0gKF86IHVua25vd24sIHZhbDogdW5rbm93bik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdmFsIGluc3RhbmNlb2YgQ29tbWFuZEJhc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2tpcEFyZ3VtZW50VmFsaWRhdGlvbiAoQ29tbWFuZEN0b3I6IENvbW1hbmRDb25zdHJ1Y3RvciwgdmFsdWU6IFNlcmlhbGl6ZWRDb21tYW5kKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc09ic2VydmF0aW9uQ29tbWFuZCh2YWx1ZSkgJiZcbiAgICAgICAgICAgICFPQlNFUlZBQkxFX0NPTU1BTkRfQ09OU1RSVUNUT1JTX1dJVEhfU0tJUFBFRF9BUkdVTUVOVF9WQUxJREFUSU9OLmluY2x1ZGVzKENvbW1hbmRDdG9yKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jcmVhdGVDb21tYW5kSW5zdGFuY2UgKENvbW1hbmRDdG9yOiBDb21tYW5kQ29uc3RydWN0b3IsIHZhbHVlOiBTZXJpYWxpemVkQ29tbWFuZCk6IGFueSB7XG4gICAgICAgIC8vIE5PVEU6IFdlIHNob3VsZCBub3QgdmFsaWRhdGUgdGhlIGNvbW1hbmQgY3JlYXRpb24gaGVyZVxuICAgICAgICAvLyBzaW5jZSBpdCB3YXMgYWxyZWFkeSBkb25lIGJlZm9yZSBhY3Rpb24gZXhlY3V0aW9uXG4gICAgICAgIGNvbnN0IHRlc3RSdW5TdHViICAgICAgICA9IHt9O1xuICAgICAgICBjb25zdCB2YWxpZGF0ZVByb3BlcnRpZXMgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5fc2tpcEFyZ3VtZW50VmFsaWRhdGlvbihDb21tYW5kQ3RvciwgdmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoQ29tbWFuZEN0b3IgYXMgT2JzZXJ2YXRpb25Db25zdHJ1Y3RvcikodmFsdWUsIHRlc3RSdW5TdHViIGFzIFRlc3RSdW4pO1xuXG4gICAgICAgIGVsc2UgaWYgKENvbW1hbmRDdG9yID09PSBTZXROYXRpdmVEaWFsb2dIYW5kbGVyQ29tbWFuZClcbiAgICAgICAgICAgIHJldHVybiBTZXROYXRpdmVEaWFsb2dIYW5kbGVyQ29tbWFuZC5mcm9tKHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gbmV3IENvbW1hbmRDdG9yKHZhbHVlLCB0ZXN0UnVuU3R1YiBhcyBUZXN0UnVuLCB2YWxpZGF0ZVByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmcm9tU2VyaWFsaXphYmxlICh2YWx1ZTogU2VyaWFsaXplZENvbW1hbmQpOiBhbnkge1xuICAgICAgICBjb25zdCBDb21tYW5kQ3RvciA9IENPTU1BTkRfQ09OU1RSVUNUT1JTLmdldCh2YWx1ZS50eXBlKTtcblxuICAgICAgICBpZiAoIUNvbW1hbmRDdG9yKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBbiBhcHByb3ByaWF0ZSBjb21tYW5kIGNvbnN0cnVjdG9yIGZvciBcIiR7dmFsdWUudHlwZX1cIiB0eXBlIHdhcyBub3QgZm91bmQuYCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUNvbW1hbmRJbnN0YW5jZShDb21tYW5kQ3RvciwgdmFsdWUpO1xuICAgIH1cbn1cbiJdfQ==