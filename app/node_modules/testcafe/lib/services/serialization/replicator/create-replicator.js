"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const replicator_1 = __importDefault(require("replicator"));
const custom_error_transform_1 = __importDefault(require("./transforms/custom-error-transform"));
const browser_console_messages_transform_1 = __importDefault(require("./transforms/browser-console-messages-transform"));
const command_base_trasform_1 = __importDefault(require("./transforms/command-base-trasform"));
const request_filter_rule_transform_1 = __importDefault(require("./transforms/request-filter-rule-transform"));
const response_mock_transform_1 = __importDefault(require("./transforms/response-mock-transform"));
const request_hook_event_data_transform_1 = __importDefault(require("./transforms/request-hook-event-data-transform"));
const re_executable_promise_transform_1 = __importDefault(require("./transforms/re-executable-promise-transform"));
const role_transform_1 = __importDefault(require("./transforms/role-transform"));
const callsite_record_transform_1 = __importDefault(require("./transforms/callsite-record-transform"));
const testcafe_error_list_transform_1 = __importDefault(require("./transforms/testcafe-error-list-transform"));
const function_marker_transform_1 = __importDefault(require("./transforms/function-marker-transform"));
const promise_marker_transform_1 = __importDefault(require("./transforms/promise-marker-transform"));
const configure_response_event_option_transform_1 = __importDefault(require("./transforms/configure-response-event-option-transform"));
const url_transform_1 = __importDefault(require("./transforms/url-transform"));
const DEFAULT_ERROR_TRANSFORM_TYPE = '[[Error]]';
function getDefaultErrorTransform(replicator) {
    return replicator.transforms.find(transform => {
        return transform.type === DEFAULT_ERROR_TRANSFORM_TYPE;
    });
}
function default_1() {
    // We need to move the 'CustomErrorTransform' transform before the default transform for the 'Error' class
    // to ensure the correct transformation order:
    // TestCafe's and custom errors will be transformed by CustomErrorTransform, built-in errors - by the built-in replicator's transformer.
    const replicator = new replicator_1.default();
    const defaultErrorTransform = getDefaultErrorTransform(replicator);
    const customErrorTransform = new custom_error_transform_1.default();
    return replicator
        .removeTransforms(defaultErrorTransform)
        .addTransforms([
        customErrorTransform,
        defaultErrorTransform,
        new url_transform_1.default(),
        new testcafe_error_list_transform_1.default(),
        new browser_console_messages_transform_1.default(),
        new re_executable_promise_transform_1.default(),
        new function_marker_transform_1.default(),
        new promise_marker_transform_1.default(),
        new command_base_trasform_1.default(),
        new request_filter_rule_transform_1.default(),
        new configure_response_event_option_transform_1.default(),
        new response_mock_transform_1.default(),
        new request_hook_event_data_transform_1.default(),
        new role_transform_1.default(),
        new callsite_record_transform_1.default(),
    ]);
}
exports.default = default_1;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXJlcGxpY2F0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VydmljZXMvc2VyaWFsaXphdGlvbi9yZXBsaWNhdG9yL2NyZWF0ZS1yZXBsaWNhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNERBQW1EO0FBQ25ELGlHQUF1RTtBQUN2RSx5SEFBOEY7QUFDOUYsK0ZBQXNFO0FBQ3RFLCtHQUFvRjtBQUNwRixtR0FBeUU7QUFDekUsdUhBQTJGO0FBQzNGLG1IQUF3RjtBQUN4RixpRkFBd0Q7QUFDeEQsdUdBQTZFO0FBQzdFLCtHQUFvRjtBQUNwRix1R0FBNkU7QUFDN0UscUdBQTJFO0FBQzNFLHVJQUEyRztBQUMzRywrRUFBc0Q7QUFFdEQsTUFBTSw0QkFBNEIsR0FBRyxXQUFXLENBQUM7QUFFakQsU0FBUyx3QkFBd0IsQ0FBRSxVQUFzQjtJQUNyRCxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzFDLE9BQU8sU0FBUyxDQUFDLElBQUksS0FBSyw0QkFBNEIsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRDtJQUNJLDBHQUEwRztJQUMxRyw4Q0FBOEM7SUFDOUMsd0lBQXdJO0lBQ3hJLE1BQU0sVUFBVSxHQUFjLElBQUksb0JBQVUsRUFBRSxDQUFDO0lBQy9DLE1BQU0scUJBQXFCLEdBQUcsd0JBQXdCLENBQUMsVUFBVSxDQUFjLENBQUM7SUFDaEYsTUFBTSxvQkFBb0IsR0FBSSxJQUFJLGdDQUFvQixFQUFFLENBQUM7SUFFekQsT0FBTyxVQUFVO1NBQ1osZ0JBQWdCLENBQUMscUJBQXFCLENBQUM7U0FDdkMsYUFBYSxDQUFDO1FBQ1gsb0JBQW9CO1FBQ3BCLHFCQUFxQjtRQUNyQixJQUFJLHVCQUFZLEVBQUU7UUFDbEIsSUFBSSx1Q0FBMEIsRUFBRTtRQUNoQyxJQUFJLDRDQUErQixFQUFFO1FBQ3JDLElBQUkseUNBQTRCLEVBQUU7UUFDbEMsSUFBSSxtQ0FBdUIsRUFBRTtRQUM3QixJQUFJLGtDQUFzQixFQUFFO1FBQzVCLElBQUksK0JBQW9CLEVBQUU7UUFDMUIsSUFBSSx1Q0FBMEIsRUFBRTtRQUNoQyxJQUFJLG1EQUFxQyxFQUFFO1FBQzNDLElBQUksaUNBQXFCLEVBQUU7UUFDM0IsSUFBSSwyQ0FBNkIsRUFBRTtRQUNuQyxJQUFJLHdCQUFhLEVBQUU7UUFDbkIsSUFBSSxtQ0FBdUIsRUFBRTtLQUNoQyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBM0JELDRCQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZXBsaWNhdG9yLCB7IFRyYW5zZm9ybSB9IGZyb20gJ3JlcGxpY2F0b3InO1xuaW1wb3J0IEN1c3RvbUVycm9yVHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3Jtcy9jdXN0b20tZXJyb3ItdHJhbnNmb3JtJztcbmltcG9ydCBCcm93c2VyQ29uc29sZU1lc3NhZ2VzVHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3Jtcy9icm93c2VyLWNvbnNvbGUtbWVzc2FnZXMtdHJhbnNmb3JtJztcbmltcG9ydCBDb21tYW5kQmFzZVRyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybXMvY29tbWFuZC1iYXNlLXRyYXNmb3JtJztcbmltcG9ydCBSZXF1ZXN0RmlsdGVyUnVsZVRyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybXMvcmVxdWVzdC1maWx0ZXItcnVsZS10cmFuc2Zvcm0nO1xuaW1wb3J0IFJlc3BvbnNlTW9ja1RyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybXMvcmVzcG9uc2UtbW9jay10cmFuc2Zvcm0nO1xuaW1wb3J0IFJlcXVlc3RIb29rRXZlbnREYXRhVHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3Jtcy9yZXF1ZXN0LWhvb2stZXZlbnQtZGF0YS10cmFuc2Zvcm0nO1xuaW1wb3J0IFJlRXhlY3V0YWJsZVByb21pc2VUcmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm1zL3JlLWV4ZWN1dGFibGUtcHJvbWlzZS10cmFuc2Zvcm0nO1xuaW1wb3J0IFJvbGVUcmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm1zL3JvbGUtdHJhbnNmb3JtJztcbmltcG9ydCBDYWxsc2l0ZVJlY29yZFRyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybXMvY2FsbHNpdGUtcmVjb3JkLXRyYW5zZm9ybSc7XG5pbXBvcnQgVGVzdENhZmVFcnJvckxpc3RUcmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm1zL3Rlc3RjYWZlLWVycm9yLWxpc3QtdHJhbnNmb3JtJztcbmltcG9ydCBGdW5jdGlvbk1hcmtlclRyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybXMvZnVuY3Rpb24tbWFya2VyLXRyYW5zZm9ybSc7XG5pbXBvcnQgUHJvbWlzZU1hcmtlclRyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybXMvcHJvbWlzZS1tYXJrZXItdHJhbnNmb3JtJztcbmltcG9ydCBDb25maWd1cmVSZXNwb25zZUV2ZW50T3B0aW9uVHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3Jtcy9jb25maWd1cmUtcmVzcG9uc2UtZXZlbnQtb3B0aW9uLXRyYW5zZm9ybSc7XG5pbXBvcnQgVVJMVHJhbnNmb3JtIGZyb20gJy4vdHJhbnNmb3Jtcy91cmwtdHJhbnNmb3JtJztcblxuY29uc3QgREVGQVVMVF9FUlJPUl9UUkFOU0ZPUk1fVFlQRSA9ICdbW0Vycm9yXV0nO1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RXJyb3JUcmFuc2Zvcm0gKHJlcGxpY2F0b3I6IFJlcGxpY2F0b3IpOiBUcmFuc2Zvcm0gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiByZXBsaWNhdG9yLnRyYW5zZm9ybXMuZmluZCh0cmFuc2Zvcm0gPT4ge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtLnR5cGUgPT09IERFRkFVTFRfRVJST1JfVFJBTlNGT1JNX1RZUEU7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpOiBSZXBsaWNhdG9yIHtcbiAgICAvLyBXZSBuZWVkIHRvIG1vdmUgdGhlICdDdXN0b21FcnJvclRyYW5zZm9ybScgdHJhbnNmb3JtIGJlZm9yZSB0aGUgZGVmYXVsdCB0cmFuc2Zvcm0gZm9yIHRoZSAnRXJyb3InIGNsYXNzXG4gICAgLy8gdG8gZW5zdXJlIHRoZSBjb3JyZWN0IHRyYW5zZm9ybWF0aW9uIG9yZGVyOlxuICAgIC8vIFRlc3RDYWZlJ3MgYW5kIGN1c3RvbSBlcnJvcnMgd2lsbCBiZSB0cmFuc2Zvcm1lZCBieSBDdXN0b21FcnJvclRyYW5zZm9ybSwgYnVpbHQtaW4gZXJyb3JzIC0gYnkgdGhlIGJ1aWx0LWluIHJlcGxpY2F0b3IncyB0cmFuc2Zvcm1lci5cbiAgICBjb25zdCByZXBsaWNhdG9yICAgICAgICAgICAgPSBuZXcgUmVwbGljYXRvcigpO1xuICAgIGNvbnN0IGRlZmF1bHRFcnJvclRyYW5zZm9ybSA9IGdldERlZmF1bHRFcnJvclRyYW5zZm9ybShyZXBsaWNhdG9yKSBhcyBUcmFuc2Zvcm07XG4gICAgY29uc3QgY3VzdG9tRXJyb3JUcmFuc2Zvcm0gID0gbmV3IEN1c3RvbUVycm9yVHJhbnNmb3JtKCk7XG5cbiAgICByZXR1cm4gcmVwbGljYXRvclxuICAgICAgICAucmVtb3ZlVHJhbnNmb3JtcyhkZWZhdWx0RXJyb3JUcmFuc2Zvcm0pXG4gICAgICAgIC5hZGRUcmFuc2Zvcm1zKFtcbiAgICAgICAgICAgIGN1c3RvbUVycm9yVHJhbnNmb3JtLFxuICAgICAgICAgICAgZGVmYXVsdEVycm9yVHJhbnNmb3JtLFxuICAgICAgICAgICAgbmV3IFVSTFRyYW5zZm9ybSgpLFxuICAgICAgICAgICAgbmV3IFRlc3RDYWZlRXJyb3JMaXN0VHJhbnNmb3JtKCksXG4gICAgICAgICAgICBuZXcgQnJvd3NlckNvbnNvbGVNZXNzYWdlc1RyYW5zZm9ybSgpLFxuICAgICAgICAgICAgbmV3IFJlRXhlY3V0YWJsZVByb21pc2VUcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgIG5ldyBGdW5jdGlvbk1hcmtlclRyYW5zZm9ybSgpLFxuICAgICAgICAgICAgbmV3IFByb21pc2VNYXJrZXJUcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgIG5ldyBDb21tYW5kQmFzZVRyYW5zZm9ybSgpLFxuICAgICAgICAgICAgbmV3IFJlcXVlc3RGaWx0ZXJSdWxlVHJhbnNmb3JtKCksXG4gICAgICAgICAgICBuZXcgQ29uZmlndXJlUmVzcG9uc2VFdmVudE9wdGlvblRyYW5zZm9ybSgpLFxuICAgICAgICAgICAgbmV3IFJlc3BvbnNlTW9ja1RyYW5zZm9ybSgpLFxuICAgICAgICAgICAgbmV3IFJlcXVlc3RIb29rRXZlbnREYXRhVHJhbnNmb3JtKCksXG4gICAgICAgICAgICBuZXcgUm9sZVRyYW5zZm9ybSgpLFxuICAgICAgICAgICAgbmV3IENhbGxzaXRlUmVjb3JkVHJhbnNmb3JtKCksXG4gICAgICAgIF0pO1xufVxuIl19