"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const debug_1 = __importDefault(require("debug"));
const json5_1 = __importDefault(require("json5"));
const lodash_1 = require("lodash");
const promisified_functions_1 = require("../utils/promisified-functions");
const option_1 = __importDefault(require("./option"));
const option_source_1 = __importDefault(require("./option-source"));
const resolve_path_relatively_cwd_1 = __importDefault(require("../utils/resolve-path-relatively-cwd"));
const render_template_1 = __importDefault(require("../utils/render-template"));
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const log_1 = __importDefault(require("../cli/log"));
const formats_1 = require("./formats");
const DEBUG_LOGGER = debug_1.default('testcafe:configuration');
class Configuration {
    constructor(configurationFilesNames) {
        var _a;
        this._options = {};
        this._defaultPaths = this._resolveFilePaths(configurationFilesNames);
        this._filePath = (_a = this._defaultPaths) === null || _a === void 0 ? void 0 : _a[0];
        this._overriddenOptions = [];
    }
    static _fromObj(obj) {
        const result = Object.create(null);
        Object.entries(obj).forEach(([key, value]) => {
            const option = new option_1.default(key, value);
            result[key] = option;
        });
        return result;
    }
    static _showConsoleWarning(message) {
        log_1.default.write(message);
    }
    static _showWarningForError(error, warningTemplate, ...args) {
        const message = render_template_1.default(warningTemplate, ...args);
        Configuration._showConsoleWarning(message);
        DEBUG_LOGGER(message);
        DEBUG_LOGGER(error);
    }
    static _resolveFilePath(path) {
        if (!path)
            return null;
        return path_1.isAbsolute(path) ? path : resolve_path_relatively_cwd_1.default(path);
    }
    _resolveFilePaths(filesNames) {
        if (!filesNames)
            return void 0;
        return lodash_1.castArray(filesNames).reduce((result, name) => {
            const resolveFilePath = Configuration._resolveFilePath(name);
            if (resolveFilePath)
                result.push(resolveFilePath);
            return result;
        }, []);
    }
    async init() {
        this._overriddenOptions = [];
    }
    mergeOptions(options) {
        Object.entries(options).map(([key, value]) => {
            const option = this._ensureOption(key, value, option_source_1.default.Input);
            if (value === void 0)
                return;
            this._setOptionValue(option, value);
        });
    }
    mergeDeep(option, source) {
        lodash_1.mergeWith(option.value, source, (targetValue, sourceValue, property) => {
            this._addOverriddenOptionIfNecessary(targetValue, sourceValue, option.source, `${option.name}.${property}`);
            return sourceValue !== void 0 ? sourceValue : targetValue;
        });
    }
    getOption(key) {
        if (!key)
            return void 0;
        const option = this._options[key];
        if (!option)
            return void 0;
        return option.value;
    }
    getOptions(predicate) {
        const result = Object.create(null);
        let includeInResult = true;
        Object.entries(this._options).forEach(([name, option]) => {
            includeInResult = predicate ? predicate(name, option) : true;
            if (includeInResult)
                result[name] = option.value;
        });
        return result;
    }
    clone() {
        return lodash_1.cloneDeep(this);
    }
    get filePath() {
        return this._filePath;
    }
    get defaultPaths() {
        return this._defaultPaths;
    }
    async _load() {
        var _a;
        if (!((_a = this.defaultPaths) === null || _a === void 0 ? void 0 : _a.length))
            return null;
        const configs = await Promise.all(this.defaultPaths.map(async (filePath) => {
            if (!await this._isConfigurationFileExists(filePath))
                return { filePath, options: null };
            let options = null;
            if (this._isJSConfiguration(filePath))
                options = this._readJsConfigurationFileContent(filePath);
            else {
                const configurationFileContent = await this._readConfigurationFileContent(filePath);
                if (configurationFileContent)
                    options = this._parseConfigurationFileContent(configurationFileContent, filePath);
            }
            return { filePath, options };
        }));
        const existedConfigs = configs.filter(config => !!config.options);
        if (!existedConfigs.length)
            return null;
        this._filePath = existedConfigs[0].filePath;
        if (existedConfigs.length > 1) {
            const configPriorityListStr = this._getConfigPriorityListString();
            Configuration._showConsoleWarning(render_template_1.default(warning_message_1.default.multipleConfigurationFilesFound, this._filePath, configPriorityListStr));
        }
        return existedConfigs[0].options;
    }
    async _isConfigurationFileExists(filePath = this.filePath) {
        try {
            await promisified_functions_1.stat(filePath);
            return true;
        }
        catch (error) {
            DEBUG_LOGGER(render_template_1.default(warning_message_1.default.cannotFindConfigurationFile, filePath, error.stack));
            return false;
        }
    }
    _isJSConfiguration(filePath = this.filePath) {
        return !!filePath && path_1.extname(filePath) === formats_1.JS_CONFIGURATION_EXTENSION;
    }
    _readJsConfigurationFileContent(filePath = this.filePath) {
        if (filePath) {
            try {
                delete require.cache[filePath];
                return require(filePath);
            }
            catch (error) {
                Configuration._showWarningForError(error, warning_message_1.default.cannotReadConfigFile, filePath);
            }
        }
        return null;
    }
    async _readConfigurationFileContent(filePath = this.filePath) {
        try {
            return await promisified_functions_1.readFile(filePath);
        }
        catch (error) {
            Configuration._showWarningForError(error, warning_message_1.default.cannotReadConfigFile, filePath);
        }
        return null;
    }
    _parseConfigurationFileContent(configurationFileContent, filePath = this.filePath) {
        try {
            return json5_1.default.parse(configurationFileContent.toString());
        }
        catch (error) {
            Configuration._showWarningForError(error, warning_message_1.default.cannotParseConfigFile, filePath);
        }
        return null;
    }
    _ensureArrayOption(name) {
        const options = this._options[name];
        if (!options)
            return;
        // NOTE: a hack to fix lodash type definitions
        // @ts-ignore
        options.value = lodash_1.castArray(options.value);
    }
    _ensureOption(name, value, source) {
        let option = null;
        if (name in this._options)
            option = this._options[name];
        else {
            option = new option_1.default(name, value, source);
            this._options[name] = option;
        }
        return option;
    }
    _ensureOptionWithValue(name, defaultValue, source) {
        const option = this._ensureOption(name, defaultValue, source);
        if (option.value !== void 0)
            return;
        option.value = defaultValue;
        option.source = source;
    }
    _addOverriddenOptionIfNecessary(value1, value2, source, optionName) {
        if (value1 === void 0 || value2 === void 0 || value1 === value2 || source !== option_source_1.default.Configuration)
            return;
        this._overriddenOptions.push(optionName);
    }
    _setOptionValue(option, value) {
        if (lodash_1.isPlainObject(option.value) && lodash_1.isPlainObject(value))
            this.mergeDeep(option, value);
        else {
            this._addOverriddenOptionIfNecessary(option.value, value, option.source, option.name);
            option.value = value;
        }
        option.source = option_source_1.default.Input;
    }
    _getConfigPriorityListString(filesPaths = this.defaultPaths) {
        return (filesPaths === null || filesPaths === void 0 ? void 0 : filesPaths.map((path, index) => `${index + 1}. ${path}`).join('\n')) || '';
    }
}
exports.default = Configuration;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi1iYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZ3VyYXRpb24vY29uZmlndXJhdGlvbi1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQTJDO0FBQzNDLGtEQUEwQjtBQUMxQixrREFBMEI7QUFDMUIsbUNBS2dCO0FBRWhCLDBFQUFnRTtBQUNoRSxzREFBOEI7QUFDOUIsb0VBQTJDO0FBQzNDLHVHQUE0RTtBQUM1RSwrRUFBc0Q7QUFDdEQsdUZBQWdFO0FBQ2hFLHFEQUE2QjtBQUU3Qix1Q0FBdUQ7QUFFdkQsTUFBTSxZQUFZLEdBQUcsZUFBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFFckQsTUFBcUIsYUFBYTtJQU05QixZQUFvQix1QkFBaUQ7O1FBQ2pFLElBQUksQ0FBQyxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLFNBQVMsU0FBWSxJQUFJLENBQUMsYUFBYSwwQ0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFUyxNQUFNLENBQUMsUUFBUSxDQUFFLEdBQVc7UUFDbEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUV0QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVTLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBRSxPQUFlO1FBQ2pELGFBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVPLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBRSxLQUFZLEVBQUUsZUFBdUIsRUFBRSxHQUFHLElBQXVCO1FBQ2xHLE1BQU0sT0FBTyxHQUFHLHlCQUFjLENBQUMsZUFBZSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFFekQsYUFBYSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTNDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVPLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBRSxJQUFtQjtRQUNoRCxJQUFJLENBQUMsSUFBSTtZQUNMLE9BQU8sSUFBSSxDQUFDO1FBRWhCLE9BQU8saUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxxQ0FBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRU8saUJBQWlCLENBQUUsVUFBb0M7UUFDM0QsSUFBSSxDQUFDLFVBQVU7WUFDWCxPQUFPLEtBQUssQ0FBQyxDQUFDO1FBRWxCLE9BQU8sa0JBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDakQsTUFBTSxlQUFlLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTdELElBQUksZUFBZTtnQkFDZixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBRWpDLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsRUFBRSxFQUFjLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUk7UUFDYixJQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFTSxZQUFZLENBQUUsT0FBZTtRQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDekMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLHVCQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFbEUsSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDO2dCQUNoQixPQUFPO1lBRVgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRVMsU0FBUyxDQUFFLE1BQWMsRUFBRSxNQUFjO1FBQy9DLGtCQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxXQUF3QixFQUFFLFdBQXdCLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO1lBQ3JHLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFFNUcsT0FBTyxXQUFXLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLFNBQVMsQ0FBRSxHQUFXO1FBQ3pCLElBQUksQ0FBQyxHQUFHO1lBQ0osT0FBTyxLQUFLLENBQUMsQ0FBQztRQUVsQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxNQUFNO1lBQ1AsT0FBTyxLQUFLLENBQUMsQ0FBQztRQUVsQixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVNLFVBQVUsQ0FBRSxTQUFxRDtRQUNwRSxNQUFNLE1BQU0sR0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQztRQUUzQixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFO1lBQ3JELGVBQWUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUU3RCxJQUFJLGVBQWU7Z0JBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRU0sS0FBSztRQUNSLE9BQU8sa0JBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSzs7UUFDZCxJQUFJLFFBQUMsSUFBSSxDQUFDLFlBQVksMENBQUUsTUFBTSxDQUFBO1lBQzFCLE9BQU8sSUFBSSxDQUFDO1FBRWhCLE1BQU0sT0FBTyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUMsUUFBUSxFQUFDLEVBQUU7WUFDckUsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQztnQkFDaEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFFdkMsSUFBSSxPQUFPLEdBQUcsSUFBcUIsQ0FBQztZQUVwQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUM7Z0JBQ2pDLE9BQU8sR0FBRyxJQUFJLENBQUMsK0JBQStCLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ3hEO2dCQUNELE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxJQUFJLENBQUMsNkJBQTZCLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRXBGLElBQUksd0JBQXdCO29CQUN4QixPQUFPLEdBQUcsSUFBSSxDQUFDLDhCQUE4QixDQUFDLHdCQUF3QixFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ3pGO1lBRUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRUosTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1FBRWhCLElBQUksQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUU1QyxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7WUFFbEUsYUFBYSxDQUFDLG1CQUFtQixDQUFDLHlCQUFjLENBQUMseUJBQWdCLENBQUMsK0JBQStCLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7U0FDOUk7UUFFRCxPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDckMsQ0FBQztJQUVTLEtBQUssQ0FBQywwQkFBMEIsQ0FBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVE7UUFDaEUsSUFBSTtZQUNBLE1BQU0sNEJBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVyQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxLQUFLLEVBQUU7WUFDVixZQUFZLENBQUMseUJBQWMsQ0FBQyx5QkFBZ0IsQ0FBQywyQkFBMkIsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFFbEcsT0FBTyxLQUFLLENBQUM7U0FDaEI7SUFDTCxDQUFDO0lBRVMsa0JBQWtCLENBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRO1FBQ2xELE9BQU8sQ0FBQyxDQUFDLFFBQVEsSUFBSSxjQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssb0NBQTBCLENBQUM7SUFDMUUsQ0FBQztJQUVNLCtCQUErQixDQUFFLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUTtRQUM1RCxJQUFJLFFBQVEsRUFBRTtZQUNWLElBQUk7Z0JBQ0EsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUUvQixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM1QjtZQUNELE9BQU8sS0FBSyxFQUFFO2dCQUNWLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUseUJBQWdCLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDOUY7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxLQUFLLENBQUMsNkJBQTZCLENBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRO1FBQ2hFLElBQUk7WUFDQSxPQUFPLE1BQU0sZ0NBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuQztRQUNELE9BQU8sS0FBSyxFQUFFO1lBQ1YsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSx5QkFBZ0IsQ0FBQyxvQkFBb0IsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM5RjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTyw4QkFBOEIsQ0FBRSx3QkFBZ0MsRUFBRSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVE7UUFDOUYsSUFBSTtZQUNBLE9BQU8sZUFBSyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsT0FBTyxLQUFLLEVBQUU7WUFDVixhQUFhLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLHlCQUFnQixDQUFDLHFCQUFxQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQy9GO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVTLGtCQUFrQixDQUFFLElBQVk7UUFDdEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsT0FBTztZQUNSLE9BQU87UUFFWCw4Q0FBOEM7UUFDOUMsYUFBYTtRQUNiLE9BQU8sQ0FBQyxLQUFLLEdBQUcsa0JBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVTLGFBQWEsQ0FBRSxJQUFZLEVBQUUsS0FBa0IsRUFBRSxNQUFvQjtRQUMzRSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVE7WUFDckIsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDNUI7WUFDRCxNQUFNLEdBQUcsSUFBSSxnQkFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7U0FDaEM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRVMsc0JBQXNCLENBQUUsSUFBWSxFQUFFLFlBQXlCLEVBQUUsTUFBb0I7UUFDM0YsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTlELElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUM7WUFDdkIsT0FBTztRQUVYLE1BQU0sQ0FBQyxLQUFLLEdBQUksWUFBWSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQzNCLENBQUM7SUFFUywrQkFBK0IsQ0FBRSxNQUFtQixFQUFFLE1BQW1CLEVBQUUsTUFBb0IsRUFBRSxVQUFrQjtRQUN6SCxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDLElBQUksTUFBTSxLQUFLLE1BQU0sSUFBSSxNQUFNLEtBQUssdUJBQVksQ0FBQyxhQUFhO1lBQ3BHLE9BQU87UUFFWCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFUyxlQUFlLENBQUUsTUFBYyxFQUFFLEtBQWtCO1FBQ3pELElBQUksc0JBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksc0JBQWEsQ0FBQyxLQUFLLENBQUM7WUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBZSxDQUFDLENBQUM7YUFDdkM7WUFDRCxJQUFJLENBQUMsK0JBQStCLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFdEYsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDeEI7UUFFRCxNQUFNLENBQUMsTUFBTSxHQUFHLHVCQUFZLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLENBQUM7SUFFUyw0QkFBNEIsQ0FBRSxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVk7UUFDbEUsT0FBTyxDQUFBLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLEtBQUssSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksTUFBSyxFQUFFLENBQUM7SUFDdEYsQ0FBQztDQUNKO0FBN1FELGdDQTZRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQWJzb2x1dGUsIGV4dG5hbWUgfSBmcm9tICdwYXRoJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgSlNPTjUgZnJvbSAnanNvbjUnO1xuaW1wb3J0IHtcbiAgICBjYXN0QXJyYXksXG4gICAgY2xvbmVEZWVwLFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgbWVyZ2VXaXRoLFxufSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBzdGF0LCByZWFkRmlsZSB9IGZyb20gJy4uL3V0aWxzL3Byb21pc2lmaWVkLWZ1bmN0aW9ucyc7XG5pbXBvcnQgT3B0aW9uIGZyb20gJy4vb3B0aW9uJztcbmltcG9ydCBPcHRpb25Tb3VyY2UgZnJvbSAnLi9vcHRpb24tc291cmNlJztcbmltcG9ydCByZXNvbHZlUGF0aFJlbGF0aXZlbHlDd2QgZnJvbSAnLi4vdXRpbHMvcmVzb2x2ZS1wYXRoLXJlbGF0aXZlbHktY3dkJztcbmltcG9ydCByZW5kZXJUZW1wbGF0ZSBmcm9tICcuLi91dGlscy9yZW5kZXItdGVtcGxhdGUnO1xuaW1wb3J0IFdBUk5JTkdfTUVTU0FHRVMgZnJvbSAnLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9jbGkvbG9nJztcbmltcG9ydCB7IERpY3Rpb25hcnkgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgSlNfQ09ORklHVVJBVElPTl9FWFRFTlNJT04gfSBmcm9tICcuL2Zvcm1hdHMnO1xuXG5jb25zdCBERUJVR19MT0dHRVIgPSBkZWJ1ZygndGVzdGNhZmU6Y29uZmlndXJhdGlvbicpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25maWd1cmF0aW9uIHtcbiAgICBwcm90ZWN0ZWQgX29wdGlvbnM6IERpY3Rpb25hcnk8T3B0aW9uPjtcbiAgICBwcm90ZWN0ZWQgX2ZpbGVQYXRoPzogc3RyaW5nO1xuICAgIHByb3RlY3RlZCByZWFkb25seSBfZGVmYXVsdFBhdGhzPzogc3RyaW5nW107XG4gICAgcHJvdGVjdGVkIF9vdmVycmlkZGVuT3B0aW9uczogc3RyaW5nW107XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGNvbmZpZ3VyYXRpb25GaWxlc05hbWVzOiBzdHJpbmcgfCBudWxsIHwgc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyAgICAgICAgICAgPSB7fTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFBhdGhzICAgICAgPSB0aGlzLl9yZXNvbHZlRmlsZVBhdGhzKGNvbmZpZ3VyYXRpb25GaWxlc05hbWVzKTtcbiAgICAgICAgdGhpcy5fZmlsZVBhdGggICAgICAgICAgPSB0aGlzLl9kZWZhdWx0UGF0aHM/LlswXTtcbiAgICAgICAgdGhpcy5fb3ZlcnJpZGRlbk9wdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc3RhdGljIF9mcm9tT2JqIChvYmo6IG9iamVjdCk6IERpY3Rpb25hcnk8T3B0aW9uPiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMob2JqKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IG5ldyBPcHRpb24oa2V5LCB2YWx1ZSk7XG5cbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gb3B0aW9uO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzdGF0aWMgX3Nob3dDb25zb2xlV2FybmluZyAobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxvZy53cml0ZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfc2hvd1dhcm5pbmdGb3JFcnJvciAoZXJyb3I6IEVycm9yLCB3YXJuaW5nVGVtcGxhdGU6IHN0cmluZywgLi4uYXJnczogVGVtcGxhdGVBcmd1bWVudHMpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHJlbmRlclRlbXBsYXRlKHdhcm5pbmdUZW1wbGF0ZSwgLi4uYXJncyk7XG5cbiAgICAgICAgQ29uZmlndXJhdGlvbi5fc2hvd0NvbnNvbGVXYXJuaW5nKG1lc3NhZ2UpO1xuXG4gICAgICAgIERFQlVHX0xPR0dFUihtZXNzYWdlKTtcbiAgICAgICAgREVCVUdfTE9HR0VSKGVycm9yKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfcmVzb2x2ZUZpbGVQYXRoIChwYXRoOiBzdHJpbmcgfCBudWxsKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGlmICghcGF0aClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIHJldHVybiBpc0Fic29sdXRlKHBhdGgpID8gcGF0aCA6IHJlc29sdmVQYXRoUmVsYXRpdmVseUN3ZChwYXRoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZXNvbHZlRmlsZVBhdGhzIChmaWxlc05hbWVzOiBzdHJpbmcgfCBudWxsIHwgc3RyaW5nW10pOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICghZmlsZXNOYW1lcylcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG5cbiAgICAgICAgcmV0dXJuIGNhc3RBcnJheShmaWxlc05hbWVzKS5yZWR1Y2UoKHJlc3VsdCwgbmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZUZpbGVQYXRoID0gQ29uZmlndXJhdGlvbi5fcmVzb2x2ZUZpbGVQYXRoKG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAocmVzb2x2ZUZpbGVQYXRoKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlc29sdmVGaWxlUGF0aCk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sIFtdIGFzIHN0cmluZ1tdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5pdCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuX292ZXJyaWRkZW5PcHRpb25zID0gW107XG4gICAgfVxuXG4gICAgcHVibGljIG1lcmdlT3B0aW9ucyAob3B0aW9uczogb2JqZWN0KTogdm9pZCB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLl9lbnN1cmVPcHRpb24oa2V5LCB2YWx1ZSwgT3B0aW9uU291cmNlLklucHV0KTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb25WYWx1ZShvcHRpb24sIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG1lcmdlRGVlcCAob3B0aW9uOiBPcHRpb24sIHNvdXJjZTogb2JqZWN0KTogdm9pZCB7XG4gICAgICAgIG1lcmdlV2l0aChvcHRpb24udmFsdWUsIHNvdXJjZSwgKHRhcmdldFZhbHVlOiBPcHRpb25WYWx1ZSwgc291cmNlVmFsdWU6IE9wdGlvblZhbHVlLCBwcm9wZXJ0eTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hZGRPdmVycmlkZGVuT3B0aW9uSWZOZWNlc3NhcnkodGFyZ2V0VmFsdWUsIHNvdXJjZVZhbHVlLCBvcHRpb24uc291cmNlLCBgJHtvcHRpb24ubmFtZX0uJHtwcm9wZXJ0eX1gKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZVZhbHVlICE9PSB2b2lkIDAgPyBzb3VyY2VWYWx1ZSA6IHRhcmdldFZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0T3B0aW9uIChrZXk6IHN0cmluZyk6IE9wdGlvblZhbHVlIHtcbiAgICAgICAgaWYgKCFrZXkpXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMuX29wdGlvbnNba2V5XTtcblxuICAgICAgICBpZiAoIW9wdGlvbilcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbi52YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0T3B0aW9ucyAocHJlZGljYXRlPzogKG5hbWU6IHN0cmluZywgb3B0aW9uOiBPcHRpb24pID0+IGJvb2xlYW4pOiBEaWN0aW9uYXJ5PE9wdGlvblZhbHVlPiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCAgICAgICAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBsZXQgaW5jbHVkZUluUmVzdWx0ID0gdHJ1ZTtcblxuICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLl9vcHRpb25zKS5mb3JFYWNoKChbbmFtZSwgb3B0aW9uXSkgPT4ge1xuICAgICAgICAgICAgaW5jbHVkZUluUmVzdWx0ID0gcHJlZGljYXRlID8gcHJlZGljYXRlKG5hbWUsIG9wdGlvbikgOiB0cnVlO1xuXG4gICAgICAgICAgICBpZiAoaW5jbHVkZUluUmVzdWx0KVxuICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IG9wdGlvbi52YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvbmUgKCk6IENvbmZpZ3VyYXRpb24ge1xuICAgICAgICByZXR1cm4gY2xvbmVEZWVwKHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZmlsZVBhdGggKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlUGF0aDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRlZmF1bHRQYXRocyAoKTogc3RyaW5nW10gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFBhdGhzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBfbG9hZCAoKTogUHJvbWlzZTxudWxsIHwgb2JqZWN0PiB7XG4gICAgICAgIGlmICghdGhpcy5kZWZhdWx0UGF0aHM/Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZ3MgPSBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLmRlZmF1bHRQYXRocy5tYXAoYXN5bmMgZmlsZVBhdGggPT4ge1xuICAgICAgICAgICAgaWYgKCFhd2FpdCB0aGlzLl9pc0NvbmZpZ3VyYXRpb25GaWxlRXhpc3RzKGZpbGVQYXRoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4geyBmaWxlUGF0aCwgb3B0aW9uczogbnVsbCB9O1xuXG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IG51bGwgYXMgb2JqZWN0IHwgbnVsbDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSlNDb25maWd1cmF0aW9uKGZpbGVQYXRoKSlcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5fcmVhZEpzQ29uZmlndXJhdGlvbkZpbGVDb250ZW50KGZpbGVQYXRoKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb25GaWxlQ29udGVudCA9IGF3YWl0IHRoaXMuX3JlYWRDb25maWd1cmF0aW9uRmlsZUNvbnRlbnQoZmlsZVBhdGgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb25GaWxlQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMuX3BhcnNlQ29uZmlndXJhdGlvbkZpbGVDb250ZW50KGNvbmZpZ3VyYXRpb25GaWxlQ29udGVudCwgZmlsZVBhdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geyBmaWxlUGF0aCwgb3B0aW9ucyB9O1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgY29uc3QgZXhpc3RlZENvbmZpZ3MgPSBjb25maWdzLmZpbHRlcihjb25maWcgPT4gISFjb25maWcub3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKCFleGlzdGVkQ29uZmlncy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICB0aGlzLl9maWxlUGF0aCA9IGV4aXN0ZWRDb25maWdzWzBdLmZpbGVQYXRoO1xuXG4gICAgICAgIGlmIChleGlzdGVkQ29uZmlncy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWdQcmlvcml0eUxpc3RTdHIgPSB0aGlzLl9nZXRDb25maWdQcmlvcml0eUxpc3RTdHJpbmcoKTtcblxuICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5fc2hvd0NvbnNvbGVXYXJuaW5nKHJlbmRlclRlbXBsYXRlKFdBUk5JTkdfTUVTU0FHRVMubXVsdGlwbGVDb25maWd1cmF0aW9uRmlsZXNGb3VuZCwgdGhpcy5fZmlsZVBhdGgsIGNvbmZpZ1ByaW9yaXR5TGlzdFN0cikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4aXN0ZWRDb25maWdzWzBdLm9wdGlvbnM7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIF9pc0NvbmZpZ3VyYXRpb25GaWxlRXhpc3RzIChmaWxlUGF0aCA9IHRoaXMuZmlsZVBhdGgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHN0YXQoZmlsZVBhdGgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIERFQlVHX0xPR0dFUihyZW5kZXJUZW1wbGF0ZShXQVJOSU5HX01FU1NBR0VTLmNhbm5vdEZpbmRDb25maWd1cmF0aW9uRmlsZSwgZmlsZVBhdGgsIGVycm9yLnN0YWNrKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBfaXNKU0NvbmZpZ3VyYXRpb24gKGZpbGVQYXRoID0gdGhpcy5maWxlUGF0aCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISFmaWxlUGF0aCAmJiBleHRuYW1lKGZpbGVQYXRoKSA9PT0gSlNfQ09ORklHVVJBVElPTl9FWFRFTlNJT047XG4gICAgfVxuXG4gICAgcHVibGljIF9yZWFkSnNDb25maWd1cmF0aW9uRmlsZUNvbnRlbnQgKGZpbGVQYXRoID0gdGhpcy5maWxlUGF0aCk6IG9iamVjdCB8IG51bGwge1xuICAgICAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlcXVpcmUuY2FjaGVbZmlsZVBhdGhdO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoZmlsZVBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5fc2hvd1dhcm5pbmdGb3JFcnJvcihlcnJvciwgV0FSTklOR19NRVNTQUdFUy5jYW5ub3RSZWFkQ29uZmlnRmlsZSwgZmlsZVBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIF9yZWFkQ29uZmlndXJhdGlvbkZpbGVDb250ZW50IChmaWxlUGF0aCA9IHRoaXMuZmlsZVBhdGgpOiBQcm9taXNlPEJ1ZmZlciB8IG51bGw+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCByZWFkRmlsZShmaWxlUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBDb25maWd1cmF0aW9uLl9zaG93V2FybmluZ0ZvckVycm9yKGVycm9yLCBXQVJOSU5HX01FU1NBR0VTLmNhbm5vdFJlYWRDb25maWdGaWxlLCBmaWxlUGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9wYXJzZUNvbmZpZ3VyYXRpb25GaWxlQ29udGVudCAoY29uZmlndXJhdGlvbkZpbGVDb250ZW50OiBCdWZmZXIsIGZpbGVQYXRoID0gdGhpcy5maWxlUGF0aCk6IG9iamVjdCB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT041LnBhcnNlKGNvbmZpZ3VyYXRpb25GaWxlQ29udGVudC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIENvbmZpZ3VyYXRpb24uX3Nob3dXYXJuaW5nRm9yRXJyb3IoZXJyb3IsIFdBUk5JTkdfTUVTU0FHRVMuY2Fubm90UGFyc2VDb25maWdGaWxlLCBmaWxlUGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2Vuc3VyZUFycmF5T3B0aW9uIChuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnNbbmFtZV07XG5cbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIC8vIE5PVEU6IGEgaGFjayB0byBmaXggbG9kYXNoIHR5cGUgZGVmaW5pdGlvbnNcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBvcHRpb25zLnZhbHVlID0gY2FzdEFycmF5KG9wdGlvbnMudmFsdWUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZW5zdXJlT3B0aW9uIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBPcHRpb25WYWx1ZSwgc291cmNlOiBPcHRpb25Tb3VyY2UpOiBPcHRpb24ge1xuICAgICAgICBsZXQgb3B0aW9uID0gbnVsbDtcblxuICAgICAgICBpZiAobmFtZSBpbiB0aGlzLl9vcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9uID0gdGhpcy5fb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb24gPSBuZXcgT3B0aW9uKG5hbWUsIHZhbHVlLCBzb3VyY2UpO1xuXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zW25hbWVdID0gb3B0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2Vuc3VyZU9wdGlvbldpdGhWYWx1ZSAobmFtZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IE9wdGlvblZhbHVlLCBzb3VyY2U6IE9wdGlvblNvdXJjZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLl9lbnN1cmVPcHRpb24obmFtZSwgZGVmYXVsdFZhbHVlLCBzb3VyY2UpO1xuXG4gICAgICAgIGlmIChvcHRpb24udmFsdWUgIT09IHZvaWQgMClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBvcHRpb24udmFsdWUgID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICBvcHRpb24uc291cmNlID0gc291cmNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfYWRkT3ZlcnJpZGRlbk9wdGlvbklmTmVjZXNzYXJ5ICh2YWx1ZTE6IE9wdGlvblZhbHVlLCB2YWx1ZTI6IE9wdGlvblZhbHVlLCBzb3VyY2U6IE9wdGlvblNvdXJjZSwgb3B0aW9uTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh2YWx1ZTEgPT09IHZvaWQgMCB8fCB2YWx1ZTIgPT09IHZvaWQgMCB8fCB2YWx1ZTEgPT09IHZhbHVlMiB8fCBzb3VyY2UgIT09IE9wdGlvblNvdXJjZS5Db25maWd1cmF0aW9uKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuX292ZXJyaWRkZW5PcHRpb25zLnB1c2gob3B0aW9uTmFtZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9zZXRPcHRpb25WYWx1ZSAob3B0aW9uOiBPcHRpb24sIHZhbHVlOiBPcHRpb25WYWx1ZSk6IHZvaWQge1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChvcHRpb24udmFsdWUpICYmIGlzUGxhaW5PYmplY3QodmFsdWUpKVxuICAgICAgICAgICAgdGhpcy5tZXJnZURlZXAob3B0aW9uLCB2YWx1ZSBhcyBvYmplY3QpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZE92ZXJyaWRkZW5PcHRpb25JZk5lY2Vzc2FyeShvcHRpb24udmFsdWUsIHZhbHVlLCBvcHRpb24uc291cmNlLCBvcHRpb24ubmFtZSk7XG5cbiAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9uLnNvdXJjZSA9IE9wdGlvblNvdXJjZS5JbnB1dDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldENvbmZpZ1ByaW9yaXR5TGlzdFN0cmluZyAoZmlsZXNQYXRocyA9IHRoaXMuZGVmYXVsdFBhdGhzKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGZpbGVzUGF0aHM/Lm1hcCgocGF0aCwgaW5kZXgpID0+IGAke2luZGV4ICsgMX0uICR7cGF0aH1gKS5qb2luKCdcXG4nKSB8fCAnJztcbiAgICB9XG59XG4iXX0=