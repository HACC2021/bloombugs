"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandFormatter = void 0;
const lodash_1 = require("lodash");
const observation_1 = require("../../test-run/commands/observation");
const actions_1 = require("../../test-run/commands/actions");
const replicator_1 = require("../../client-functions/replicator");
const diff_1 = __importDefault(require("../../utils/diff"));
const options_1 = require("../../test-run/commands/options");
const type_1 = __importDefault(require("../../test-run/commands/type"));
const assertion_1 = __importDefault(require("../../test-run/commands/assertion"));
const CONFIDENTIAL_INFO_PLACEHOLDER = '********';
function isCommandOptions(obj) {
    return obj instanceof options_1.ActionOptions || obj instanceof options_1.ResizeToFitDeviceOptions || obj instanceof options_1.AssertionOptions;
}
class CommandFormatter {
    constructor(command, result) {
        this._elements = [];
        this._command = command;
        this._result = result;
    }
    format() {
        const formattedCommand = { type: this._command.type };
        if (this._command instanceof observation_1.ExecuteSelectorCommand)
            formattedCommand.selector = this._prepareSelector(this._command, 'selector');
        else if (this._command instanceof observation_1.ExecuteClientFunctionCommand)
            formattedCommand.clientFn = this._prepareClientFunction(this._command);
        else if (this._command instanceof actions_1.UseRoleCommand)
            formattedCommand.role = this._prepareRole(this._command);
        else if (this._command instanceof actions_1.NavigateToCommand)
            formattedCommand.url = this._prepareUrl(this._command);
        else if (this._command instanceof actions_1.SetNativeDialogHandlerCommand)
            formattedCommand.dialogHandler = this._prepareDialogHandler(this._command);
        else
            this._assignProperties(this._command, formattedCommand);
        this._maskConfidentialInfo(formattedCommand);
        return formattedCommand;
    }
    _maskConfidentialInfo(command) {
        var _a;
        if (!((_a = command.options) === null || _a === void 0 ? void 0 : _a.confidential))
            return;
        if (this._command instanceof actions_1.TypeTextCommand)
            command.text = CONFIDENTIAL_INFO_PLACEHOLDER;
        else if (this._command instanceof actions_1.PressKeyCommand)
            command.keys = CONFIDENTIAL_INFO_PLACEHOLDER;
    }
    _getElementByPropertyName(propertyName) {
        this._ensureSelectorElements();
        switch (propertyName) {
            case 'selector':
            case 'startSelector':
                return this._elements[0];
            case 'endSelector':
            case 'destinationSelector':
                return this._elements[1];
        }
        return this._elements[0];
    }
    _prepareSelector(command, propertyName) {
        const selectorChain = command.apiFnChain;
        const expression = selectorChain.join('');
        const result = { expression };
        let element = null;
        if (this._result)
            element = this._getElementByPropertyName(propertyName);
        if (element)
            result.element = element;
        if (command.timeout)
            result.timeout = command.timeout;
        return result;
    }
    _prepareClientFunction(command) {
        return {
            code: command.fnCode,
            args: command.args[0],
        };
    }
    _prepareDialogHandler(command) {
        return this._prepareClientFunction(command.dialogHandler);
    }
    _prepareRole(command) {
        const { loginUrl, opts, phase } = command.role;
        return { loginUrl, options: opts, phase };
    }
    _prepareUrl(command) {
        return command.url;
    }
    _filterNotReportedProperties(properties, commandType) {
        if (commandType !== type_1.default.assertion)
            return properties;
        return properties.filter(prop => !assertion_1.default.NOT_REPORTED_PROPERTIES.includes(prop));
    }
    _assignProperties(command, formattedCommand) {
        if (!this._command._getAssignableProperties)
            return;
        let sourceProperties = this._command._getAssignableProperties().map(prop => prop.name);
        sourceProperties = this._filterNotReportedProperties(sourceProperties, this._command.type);
        sourceProperties.forEach((key) => {
            const property = this._command[key];
            if (property instanceof observation_1.ExecuteSelectorCommand)
                formattedCommand[key] = this._prepareSelector(property, key);
            else if (isCommandOptions(property)) {
                const modifiedOptions = CommandFormatter._getModifiedOptions(property);
                if (!lodash_1.isEmpty(modifiedOptions))
                    formattedCommand[key] = modifiedOptions;
            }
            else
                formattedCommand[key] = property;
        });
    }
    _ensureSelectorElements() {
        if (!this._result || this._elements.length)
            return;
        const decoded = replicator_1.createReplicator(new replicator_1.SelectorNodeTransform()).decode(this._result);
        this._elements = Array.isArray(decoded) ? decoded : [decoded];
    }
    static _getModifiedOptions(commandOptions) {
        const constructor = commandOptions.constructor;
        const defaultOptions = new constructor();
        return diff_1.default(defaultOptions, commandOptions);
    }
}
exports.CommandFormatter = CommandFormatter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC1mb3JtYXR0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVwb3J0ZXIvY29tbWFuZC9jb21tYW5kLWZvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxtQ0FBaUM7QUFDakMscUVBQTJHO0FBQzNHLDZEQU15QztBQUV6QyxrRUFBNEY7QUFJNUYsNERBQW9DO0FBRXBDLDZEQUl5QztBQUd6Qyx3RUFBdUQ7QUFDdkQsa0ZBQWlFO0FBR2pFLE1BQU0sNkJBQTZCLEdBQUcsVUFBVSxDQUFDO0FBRWpELFNBQVMsZ0JBQWdCLENBQUUsR0FBVztJQUNsQyxPQUFPLEdBQUcsWUFBWSx1QkFBYSxJQUFJLEdBQUcsWUFBWSxrQ0FBd0IsSUFBSSxHQUFHLFlBQVksMEJBQWdCLENBQUM7QUFDdEgsQ0FBQztBQUVELE1BQWEsZ0JBQWdCO0lBS3pCLFlBQW9CLE9BQW9CLEVBQUUsTUFBZTtRQUpqRCxjQUFTLEdBQWtCLEVBQUUsQ0FBQztRQUtsQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBRU0sTUFBTTtRQUNULE1BQU0sZ0JBQWdCLEdBQXFCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFeEUsSUFBSSxJQUFJLENBQUMsUUFBUSxZQUFZLG9DQUFzQjtZQUMvQyxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDNUUsSUFBSSxJQUFJLENBQUMsUUFBUSxZQUFZLDBDQUE0QjtZQUMxRCxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN0RSxJQUFJLElBQUksQ0FBQyxR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a0IsQ0FBQyxDQUFDO2dCQUVqRixJQUFJLENBQUMsZ0JBQU8sQ0FBQyxlQUFlLENBQUM7b0JBQ3pCLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLGVBQWUsQ0FBQzthQUMvQzs7Z0JBRUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLHVCQUF1QjtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU07WUFDdEMsT0FBTztRQUVYLE1BQU0sT0FBTyxHQUFHLDZCQUFnQixDQUFDLElBQUksa0NBQXFCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkYsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVPLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBRSxjQUFzQjtRQUN0RCxNQUFNLFdBQVcsR0FBTSxjQUFjLENBQUMsV0FBZ0MsQ0FBQztRQUN2RSxNQUFNLGNBQWMsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBRXpDLE9BQU8sY0FBSSxDQUFDLGNBQW9DLEVBQUUsY0FBb0MsQ0FBQyxDQUFDO0lBQzVGLENBQUM7Q0FDSjtBQS9JRCw0Q0ErSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEV4ZWN1dGVTZWxlY3RvckNvbW1hbmQsIEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmQgfSBmcm9tICcuLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9vYnNlcnZhdGlvbic7XG5pbXBvcnQge1xuICAgIE5hdmlnYXRlVG9Db21tYW5kLFxuICAgIFByZXNzS2V5Q29tbWFuZCxcbiAgICBTZXROYXRpdmVEaWFsb2dIYW5kbGVyQ29tbWFuZCxcbiAgICBUeXBlVGV4dENvbW1hbmQsXG4gICAgVXNlUm9sZUNvbW1hbmQsXG59IGZyb20gJy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL2FjdGlvbnMnO1xuXG5pbXBvcnQgeyBjcmVhdGVSZXBsaWNhdG9yLCBTZWxlY3Rvck5vZGVUcmFuc2Zvcm0gfSBmcm9tICcuLi8uLi9jbGllbnQtZnVuY3Rpb25zL3JlcGxpY2F0b3InO1xuaW1wb3J0IHsgRm9ybWF0dGVkQ29tbWFuZCwgU2VsZWN0b3JJbmZvIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJy4uLy4uL2NvbmZpZ3VyYXRpb24vaW50ZXJmYWNlcyc7XG5pbXBvcnQgZGlmZiBmcm9tICcuLi8uLi91dGlscy9kaWZmJztcblxuaW1wb3J0IHtcbiAgICBBY3Rpb25PcHRpb25zLFxuICAgIFJlc2l6ZVRvRml0RGV2aWNlT3B0aW9ucyxcbiAgICBBc3NlcnRpb25PcHRpb25zLFxufSBmcm9tICcuLi8uLi90ZXN0LXJ1bi9jb21tYW5kcy9vcHRpb25zJztcblxuaW1wb3J0IENvbW1hbmRCYXNlIGZyb20gJy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL2Jhc2UnO1xuaW1wb3J0IENvbW1hbmRUeXBlIGZyb20gJy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL3R5cGUnO1xuaW1wb3J0IEFzc2VydGlvbkNvbW1hbmQgZnJvbSAnLi4vLi4vdGVzdC1ydW4vY29tbWFuZHMvYXNzZXJ0aW9uJztcblxuXG5jb25zdCBDT05GSURFTlRJQUxfSU5GT19QTEFDRUhPTERFUiA9ICcqKioqKioqKic7XG5cbmZ1bmN0aW9uIGlzQ29tbWFuZE9wdGlvbnMgKG9iajogb2JqZWN0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFjdGlvbk9wdGlvbnMgfHwgb2JqIGluc3RhbmNlb2YgUmVzaXplVG9GaXREZXZpY2VPcHRpb25zIHx8IG9iaiBpbnN0YW5jZW9mIEFzc2VydGlvbk9wdGlvbnM7XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kRm9ybWF0dGVyIHtcbiAgICBwcml2YXRlIF9lbGVtZW50czogSFRNTEVsZW1lbnRbXSA9IFtdO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbW1hbmQ6IENvbW1hbmRCYXNlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3Jlc3VsdDogdW5rbm93bjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoY29tbWFuZDogQ29tbWFuZEJhc2UsIHJlc3VsdDogdW5rbm93bikge1xuICAgICAgICB0aGlzLl9jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5fcmVzdWx0ID0gcmVzdWx0O1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtYXQgKCk6IEZvcm1hdHRlZENvbW1hbmQge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRDb21tYW5kOiBGb3JtYXR0ZWRDb21tYW5kID0geyB0eXBlOiB0aGlzLl9jb21tYW5kLnR5cGUgfTtcblxuICAgICAgICBpZiAodGhpcy5fY29tbWFuZCBpbnN0YW5jZW9mIEV4ZWN1dGVTZWxlY3RvckNvbW1hbmQpXG4gICAgICAgICAgICBmb3JtYXR0ZWRDb21tYW5kLnNlbGVjdG9yID0gdGhpcy5fcHJlcGFyZVNlbGVjdG9yKHRoaXMuX2NvbW1hbmQsICdzZWxlY3RvcicpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLl9jb21tYW5kIGluc3RhbmNlb2YgRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZClcbiAgICAgICAgICAgIGZvcm1hdHRlZENvbW1hbmQuY2xpZW50Rm4gPSB0aGlzLl9wcmVwYXJlQ2xpZW50RnVuY3Rpb24odGhpcy5fY29tbWFuZCk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2NvbW1hbmQgaW5zdGFuY2VvZiBVc2VSb2xlQ29tbWFuZClcbiAgICAgICAgICAgIGZvcm1hdHRlZENvbW1hbmQucm9sZSA9IHRoaXMuX3ByZXBhcmVSb2xlKHRoaXMuX2NvbW1hbmQpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLl9jb21tYW5kIGluc3RhbmNlb2YgTmF2aWdhdGVUb0NvbW1hbmQpXG4gICAgICAgICAgICBmb3JtYXR0ZWRDb21tYW5kLnVybCA9IHRoaXMuX3ByZXBhcmVVcmwodGhpcy5fY29tbWFuZCk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2NvbW1hbmQgaW5zdGFuY2VvZiBTZXROYXRpdmVEaWFsb2dIYW5kbGVyQ29tbWFuZClcbiAgICAgICAgICAgIGZvcm1hdHRlZENvbW1hbmQuZGlhbG9nSGFuZGxlciA9IHRoaXMuX3ByZXBhcmVEaWFsb2dIYW5kbGVyKHRoaXMuX2NvbW1hbmQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Qcm9wZXJ0aWVzKHRoaXMuX2NvbW1hbmQsIGZvcm1hdHRlZENvbW1hbmQpO1xuXG4gICAgICAgIHRoaXMuX21hc2tDb25maWRlbnRpYWxJbmZvKGZvcm1hdHRlZENvbW1hbmQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRDb21tYW5kO1xuICAgIH1cblxuICAgIHByaXZhdGUgX21hc2tDb25maWRlbnRpYWxJbmZvIChjb21tYW5kOiBGb3JtYXR0ZWRDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIGlmICghKGNvbW1hbmQub3B0aW9ucyBhcyBhbnkpPy5jb25maWRlbnRpYWwpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbW1hbmQgaW5zdGFuY2VvZiBUeXBlVGV4dENvbW1hbmQpXG4gICAgICAgICAgICBjb21tYW5kLnRleHQgPSBDT05GSURFTlRJQUxfSU5GT19QTEFDRUhPTERFUjtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fY29tbWFuZCBpbnN0YW5jZW9mIFByZXNzS2V5Q29tbWFuZClcbiAgICAgICAgICAgIGNvbW1hbmQua2V5cyA9IENPTkZJREVOVElBTF9JTkZPX1BMQUNFSE9MREVSO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2dldEVsZW1lbnRCeVByb3BlcnR5TmFtZSAocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVNlbGVjdG9yRWxlbWVudHMoKTtcblxuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5TmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnc2VsZWN0b3InOlxuICAgICAgICAgICAgY2FzZSAnc3RhcnRTZWxlY3Rvcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRzWzBdO1xuICAgICAgICAgICAgY2FzZSAnZW5kU2VsZWN0b3InOlxuICAgICAgICAgICAgY2FzZSAnZGVzdGluYXRpb25TZWxlY3Rvcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRzWzBdO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3ByZXBhcmVTZWxlY3RvciAoY29tbWFuZDogRXhlY3V0ZVNlbGVjdG9yQ29tbWFuZCwgcHJvcGVydHlOYW1lOiBzdHJpbmcpOiBTZWxlY3RvckluZm8ge1xuICAgICAgICBjb25zdCBzZWxlY3RvckNoYWluID0gY29tbWFuZC5hcGlGbkNoYWluIGFzIHN0cmluZ1tdO1xuICAgICAgICBjb25zdCBleHByZXNzaW9uICAgID0gc2VsZWN0b3JDaGFpbi5qb2luKCcnKTtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IFNlbGVjdG9ySW5mbyA9IHsgZXhwcmVzc2lvbiB9O1xuXG4gICAgICAgIGxldCBlbGVtZW50ID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5fcmVzdWx0KVxuICAgICAgICAgICAgZWxlbWVudCA9IHRoaXMuX2dldEVsZW1lbnRCeVByb3BlcnR5TmFtZShwcm9wZXJ0eU5hbWUpO1xuXG4gICAgICAgIGlmIChlbGVtZW50KVxuICAgICAgICAgICAgcmVzdWx0LmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICAgIGlmIChjb21tYW5kLnRpbWVvdXQpXG4gICAgICAgICAgICByZXN1bHQudGltZW91dCA9IGNvbW1hbmQudGltZW91dCBhcyBudW1iZXI7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9wcmVwYXJlQ2xpZW50RnVuY3Rpb24gKGNvbW1hbmQ6IEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmQpOiBvYmplY3Qge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZTogY29tbWFuZC5mbkNvZGUsXG4gICAgICAgICAgICBhcmdzOiBjb21tYW5kLmFyZ3NbMF0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcHJlcGFyZURpYWxvZ0hhbmRsZXIgKGNvbW1hbmQ6IFNldE5hdGl2ZURpYWxvZ0hhbmRsZXJDb21tYW5kKTogb2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXBhcmVDbGllbnRGdW5jdGlvbihjb21tYW5kLmRpYWxvZ0hhbmRsZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3ByZXBhcmVSb2xlIChjb21tYW5kOiBVc2VSb2xlQ29tbWFuZCk6IG9iamVjdCB7XG4gICAgICAgIGNvbnN0IHsgbG9naW5VcmwsIG9wdHMsIHBoYXNlIH0gPSBjb21tYW5kLnJvbGU7XG5cbiAgICAgICAgcmV0dXJuIHsgbG9naW5VcmwsIG9wdGlvbnM6IG9wdHMsIHBoYXNlIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcHJlcGFyZVVybCAoY29tbWFuZDogTmF2aWdhdGVUb0NvbW1hbmQpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gY29tbWFuZC51cmw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZmlsdGVyTm90UmVwb3J0ZWRQcm9wZXJ0aWVzIChwcm9wZXJ0aWVzOiBzdHJpbmdbXSwgY29tbWFuZFR5cGU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgaWYgKGNvbW1hbmRUeXBlICE9PSBDb21tYW5kVHlwZS5hc3NlcnRpb24pXG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydGllcztcblxuICAgICAgICByZXR1cm4gcHJvcGVydGllcy5maWx0ZXIocHJvcCA9PiAhQXNzZXJ0aW9uQ29tbWFuZC5OT1RfUkVQT1JURURfUFJPUEVSVElFUy5pbmNsdWRlcyhwcm9wKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYXNzaWduUHJvcGVydGllcyAoY29tbWFuZDogQ29tbWFuZEJhc2UsIGZvcm1hdHRlZENvbW1hbmQ6IEZvcm1hdHRlZENvbW1hbmQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb21tYW5kLl9nZXRBc3NpZ25hYmxlUHJvcGVydGllcylcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBsZXQgc291cmNlUHJvcGVydGllcyA9IHRoaXMuX2NvbW1hbmQuX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzKCkubWFwKHByb3AgPT4gcHJvcC5uYW1lKTtcblxuICAgICAgICBzb3VyY2VQcm9wZXJ0aWVzID0gdGhpcy5fZmlsdGVyTm90UmVwb3J0ZWRQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnRpZXMsIHRoaXMuX2NvbW1hbmQudHlwZSk7XG5cbiAgICAgICAgc291cmNlUHJvcGVydGllcy5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSB0aGlzLl9jb21tYW5kW2tleV07XG5cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSBpbnN0YW5jZW9mIEV4ZWN1dGVTZWxlY3RvckNvbW1hbmQpXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkQ29tbWFuZFtrZXldID0gdGhpcy5fcHJlcGFyZVNlbGVjdG9yKHByb3BlcnR5LCBrZXkpO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNDb21tYW5kT3B0aW9ucyhwcm9wZXJ0eSBhcyBvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kaWZpZWRPcHRpb25zID0gQ29tbWFuZEZvcm1hdHRlci5fZ2V0TW9kaWZpZWRPcHRpb25zKHByb3BlcnR5IGFzIG9iamVjdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWlzRW1wdHkobW9kaWZpZWRPcHRpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkQ29tbWFuZFtrZXldID0gbW9kaWZpZWRPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZENvbW1hbmRba2V5XSA9IHByb3BlcnR5O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9lbnN1cmVTZWxlY3RvckVsZW1lbnRzICgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZXN1bHQgfHwgdGhpcy5fZWxlbWVudHMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSBjcmVhdGVSZXBsaWNhdG9yKG5ldyBTZWxlY3Rvck5vZGVUcmFuc2Zvcm0oKSkuZGVjb2RlKHRoaXMuX3Jlc3VsdCk7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudHMgPSBBcnJheS5pc0FycmF5KGRlY29kZWQpID8gZGVjb2RlZCA6IFtkZWNvZGVkXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfZ2V0TW9kaWZpZWRPcHRpb25zIChjb21tYW5kT3B0aW9uczogb2JqZWN0KTogRGljdGlvbmFyeTxvYmplY3Q+IHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yICAgID0gY29tbWFuZE9wdGlvbnMuY29uc3RydWN0b3IgYXMgT2JqZWN0Q29uc3RydWN0b3I7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gbmV3IGNvbnN0cnVjdG9yKCk7XG5cbiAgICAgICAgcmV0dXJuIGRpZmYoZGVmYXVsdE9wdGlvbnMgYXMgRGljdGlvbmFyeTxvYmplY3Q+LCBjb21tYW5kT3B0aW9ucyBhcyBEaWN0aW9uYXJ5PG9iamVjdD4pO1xuICAgIH1cbn1cbiJdfQ==